{"version":3,"file":"static/js/main.07079ecb.js","mappings":"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","sources":["src/components/SearchBar.tsx","src/components/TableSettings.tsx","src/config/env.ts","src/utils/supabase.ts","src/components/GoogleSignIn.tsx","src/hooks/useGoogleAuth.ts","src/components/UserMenu.tsx","src/navigation/AppNavigator.tsx","src/components/ErrorBoundary.tsx","index.ts","App.tsx","src/utils/routes.ts","src/components/LoadingIndicator.tsx","src/constants/layout.ts","src/hooks/useFilteredFoils.ts","src/utils/dataTransform.ts","src/services/productService.ts","src/hooks/useFoils.ts","src/theme/ThemeContext.tsx","src/theme/colors.ts","src/utils/logger.ts","src/utils/storage.ts"],"sourcesContent":["import React from 'react';\nimport { View, TextInput, Pressable, Text, StyleSheet, Platform } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { colors } from '../theme/colors';\n\ninterface SearchBarProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  onClear: () => void;\n  placeholder?: string;\n}\n\nexport function SearchBar({\n  value,\n  onChangeText,\n  onClear,\n  placeholder = '🔍 Search foils...'\n}: SearchBarProps) {\n  return (\n    <View style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={value}\n        onChangeText={onChangeText}\n        placeholder={placeholder}\n        placeholderTextColor={colors.text.muted}\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n      />\n      {value.length > 0 && (\n        <Pressable\n          style={styles.clearButton}\n          onPress={onClear}\n        >\n          <Text style={styles.clearButtonText}>✕</Text>\n        </Pressable>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: colors.background.secondary,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    borderWidth: 1,\n    borderColor: colors.border,\n    height: '100%',\n    minHeight: 36,\n  },\n  input: {\n    flex: 1,\n    fontSize: 14,\n    color: colors.text.primary,\n    height: '100%',\n    padding: 0,\n  },\n  clearButton: {\n    padding: 4,\n  },\n  clearButtonText: {\n    color: colors.text.muted,\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n}); ","import React, { useState, useMemo, useEffect } from 'react';\nimport { View, Text, Pressable, StyleSheet, Modal, Platform, ScrollView } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { useTheme } from '../theme/ThemeContext';\nimport { FilterOptions } from '../types/filters';\nimport { BaseProduct } from '../types/scraper';\nimport { saveFilters, saveColumns, loadFilters, loadColumns, StoredFilters, StoredColumns } from '../utils/storage';\n\ninterface Column {\n  id: string;\n  label: string;\n  isVisible: boolean;\n}\n\ninterface TableSettingsProps {\n  filterOptions: {\n    brands: string[];\n    series: string[];\n    types: string[];\n  };\n  selectedBrands: string[];\n  selectedSeries: string[];\n  selectedTypes: string[];\n  onFilterChange: (type: keyof FilterOptions, value: string) => void;\n  onClearFilters: () => void;\n  columns: Column[];\n  onColumnVisibilityChange: (columnId: string) => void;\n  onResetColumns: () => void;\n  foils: BaseProduct[];\n}\n\nexport function TableSettings({\n  filterOptions,\n  selectedBrands,\n  selectedSeries,\n  selectedTypes,\n  onFilterChange,\n  onClearFilters,\n  columns,\n  onColumnVisibilityChange,\n  onResetColumns,\n  foils,\n}: TableSettingsProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'filters' | 'columns'>('filters');\n  const { colors, isDark, toggleTheme } = useTheme();\n\n  // Load saved settings on mount\n  useEffect(() => {\n    const loadSavedSettings = async () => {\n      try {\n        // Load and apply saved filters\n        const savedFilters = await loadFilters();\n        if (savedFilters) {\n          savedFilters.brands.forEach(brand => onFilterChange('brands', brand));\n          savedFilters.series.forEach(series => onFilterChange('series', series));\n          savedFilters.types.forEach(type => onFilterChange('type', type));\n        }\n\n        // Load and apply saved column settings\n        const savedColumns = await loadColumns();\n        if (savedColumns) {\n          // Create a map of current column visibility\n          const currentColumns = Object.fromEntries(\n            columns.map(col => [col.id, col.isVisible])\n          );\n\n          // Update each column's visibility if it differs from saved state\n          Object.entries(savedColumns).forEach(([columnId, isVisible]) => {\n            if (currentColumns[columnId] !== isVisible) {\n              onColumnVisibilityChange(columnId);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error loading settings:', error);\n      }\n    };\n\n    loadSavedSettings();\n  }, []); // Empty dependency array to only run on mount\n\n  // Save filters when they change\n  useEffect(() => {\n    const saveFilterSettings = async () => {\n      try {\n        const filters: StoredFilters = {\n          brands: selectedBrands,\n          series: selectedSeries,\n          types: selectedTypes,\n        };\n        await saveFilters(filters);\n      } catch (error) {\n        console.error('Error saving filter settings:', error);\n      }\n    };\n\n    saveFilterSettings();\n  }, [selectedBrands, selectedSeries, selectedTypes]);\n\n  // Save column settings when they change\n  useEffect(() => {\n    const saveColumnSettings = async () => {\n      try {\n        const columnSettings: StoredColumns = {};\n        columns.forEach(column => {\n          columnSettings[column.id] = column.isVisible;\n        });\n        await saveColumns(columnSettings);\n      } catch (error) {\n        console.error('Error saving column settings:', error);\n      }\n    };\n\n    saveColumnSettings();\n  }, [columns]);\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = async (columnId: string) => {\n    onColumnVisibilityChange(columnId);\n  };\n\n  // Handle reset columns\n  const handleResetColumns = async () => {\n    onResetColumns();\n    try {\n      const columnSettings: StoredColumns = {};\n      columns.forEach(column => {\n        columnSettings[column.id] = column.isVisible;\n      });\n      await saveColumns(columnSettings);\n    } catch (error) {\n      console.error('Error resetting column settings:', error);\n    }\n  };\n\n  // Filter series based on selected brands\n  const availableSeries = useMemo(() => {\n    if (selectedBrands.length === 0) {\n      return filterOptions.series;\n    }\n\n    // Get all series from foils that match selected brands\n    const seriesSet = new Set<string>();\n    foils.forEach(foil => {\n      if (selectedBrands.includes(foil.brand) && foil.series) {\n        seriesSet.add(foil.series);\n      }\n    });\n\n    return Array.from(seriesSet).sort();\n  }, [filterOptions.series, selectedBrands, foils]);\n\n  return (\n    <>\n      <Pressable \n        onPress={() => setIsOpen(true)}\n        style={[styles.iconButton, { backgroundColor: colors.background.secondary }]}\n      >\n        <MaterialIcons name=\"settings\" size={24} color={colors.text.primary} />\n      </Pressable>\n\n      <Modal\n        visible={isOpen}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setIsOpen(false)}\n      >\n        <Pressable \n          style={[styles.modalOverlay, { backgroundColor: isDark ? 'rgba(0, 0, 0, 0.7)' : 'rgba(0, 0, 0, 0.5)' }]}\n          onPress={() => setIsOpen(false)}\n        >\n          <Pressable \n            style={[styles.modalContent, { backgroundColor: colors.background.primary }]}\n            onPress={e => e.stopPropagation()}\n          >\n            <View style={[styles.modalHeader, { borderBottomColor: colors.border }]}>\n              <Text style={[styles.modalTitle, { color: colors.text.primary }]}>Table Settings</Text>\n              <Pressable \n                onPress={() => setIsOpen(false)}\n                style={styles.closeButton}\n              >\n                <MaterialIcons name=\"close\" size={24} color={colors.text.secondary} />\n              </Pressable>\n            </View>\n\n            <View style={[styles.tabs, { borderBottomColor: colors.border }]}>\n              <Pressable\n                style={[styles.tab, activeTab === 'filters' && [styles.activeTab, { borderBottomColor: colors.primary }]]}\n                onPress={() => setActiveTab('filters')}\n              >\n                <Text style={[\n                  styles.tabText, \n                  { color: colors.text.secondary },\n                  activeTab === 'filters' && [styles.activeTabText, { color: colors.primary }]\n                ]}>\n                  Filters {(selectedBrands.length > 0 || selectedSeries.length > 0 || selectedTypes.length > 0) && '•'}\n                </Text>\n              </Pressable>\n              <Pressable\n                style={[styles.tab, activeTab === 'columns' && [styles.activeTab, { borderBottomColor: colors.primary }]]}\n                onPress={() => setActiveTab('columns')}\n              >\n                <Text style={[\n                  styles.tabText,\n                  { color: colors.text.secondary },\n                  activeTab === 'columns' && [styles.activeTabText, { color: colors.primary }]\n                ]}>\n                  Columns {columns.some(col => !col.isVisible) && '•'}\n                </Text>\n              </Pressable>\n            </View>\n\n            {activeTab === 'filters' ? (\n              <View style={styles.contentWrapper}>\n                <ScrollView style={styles.scrollView} contentContainerStyle={styles.scrollContent}>\n                  <View style={styles.content}>\n                    <View style={styles.headerWithAction}>\n                      <Text style={[styles.contentTitle, { color: colors.text.primary }]}>Active Filters</Text>\n                      {(selectedBrands.length > 0 || selectedSeries.length > 0 || selectedTypes.length > 0) && (\n                        <Pressable \n                          onPress={onClearFilters}\n                          style={[styles.clearButton, { backgroundColor: colors.background.secondary }]}\n                        >\n                          <Text style={[styles.clearButtonText, { color: colors.text.secondary }]}>Clear All</Text>\n                        </Pressable>\n                      )}\n                    </View>\n                    <View style={styles.section}>\n                      <Text style={[styles.sectionTitle, { color: colors.text.primary }]}>Brand</Text>\n                      <View style={styles.chipContainer}>\n                        {filterOptions.brands.map((brand) => (\n                          <Pressable\n                            key={brand}\n                            style={[\n                              styles.chip,\n                              { backgroundColor: colors.background.secondary },\n                              selectedBrands.includes(brand) && [styles.chipSelected, { backgroundColor: colors.primary }],\n                            ]}\n                            onPress={() => onFilterChange('brands', brand)}\n                          >\n                            <Text \n                              style={[\n                                styles.chipText,\n                                { color: colors.text.secondary },\n                                selectedBrands.includes(brand) && [styles.chipTextSelected, { color: colors.text.inverse }],\n                              ]}\n                            >\n                              {brand}\n                            </Text>\n                          </Pressable>\n                        ))}\n                      </View>\n                    </View>\n\n                    <View style={styles.section}>\n                      <Text style={[styles.sectionTitle, { color: colors.text.primary }]}>Type</Text>\n                      <View style={styles.chipContainer}>\n                        {filterOptions.types.map((type) => (\n                          <Pressable\n                            key={type}\n                            style={[\n                              styles.chip,\n                              { backgroundColor: colors.background.secondary },\n                              selectedTypes.includes(type) && [styles.chipSelected, { backgroundColor: colors.primary }],\n                            ]}\n                            onPress={() => onFilterChange('type', type)}\n                          >\n                            <Text \n                              style={[\n                                styles.chipText,\n                                { color: colors.text.secondary },\n                                selectedTypes.includes(type) && [styles.chipTextSelected, { color: colors.text.inverse }],\n                              ]}\n                            >\n                              {type}\n                            </Text>\n                          </Pressable>\n                        ))}\n                      </View>\n                    </View>\n\n                    <View style={styles.section}>\n                      <Text style={[styles.sectionTitle, { color: colors.text.primary }]}>Series</Text>\n                      <View style={styles.chipContainer}>\n                        {availableSeries.length > 0 ? (\n                          availableSeries.map((series) => (\n                            <Pressable\n                              key={series}\n                              style={[\n                                styles.chip,\n                                { backgroundColor: colors.background.secondary },\n                                selectedSeries.includes(series) && [styles.chipSelected, { backgroundColor: colors.primary }],\n                              ]}\n                              onPress={() => onFilterChange('series', series)}\n                            >\n                              <Text \n                                style={[\n                                  styles.chipText,\n                                  { color: colors.text.secondary },\n                                  selectedSeries.includes(series) && [styles.chipTextSelected, { color: colors.text.inverse }],\n                                ]}\n                              >\n                                {series}\n                              </Text>\n                            </Pressable>\n                          ))\n                        ) : (\n                          <Text style={[styles.noSeriesText, { color: colors.text.secondary }]}>\n                            No series available for selected brands\n                          </Text>\n                        )}\n                      </View>\n                    </View>\n\n                    <View style={[styles.section, styles.themeSection]}>\n                      <Text style={[styles.sectionTitle, { color: colors.text.primary }]}>Appearance</Text>\n                      <Pressable\n                        style={[styles.themeToggle, { backgroundColor: colors.background.secondary }]}\n                        onPress={toggleTheme}\n                      >\n                        <View style={styles.themeToggleContent}>\n                          <MaterialIcons \n                            name={isDark ? 'dark-mode' : 'light-mode'} \n                            size={20} \n                            color={colors.text.primary} \n                          />\n                          <Text style={[styles.themeToggleText, { color: colors.text.primary }]}>\n                            {isDark ? 'Dark Mode' : 'Light Mode'}\n                          </Text>\n                        </View>\n                        <MaterialIcons \n                          name=\"chevron-right\" \n                          size={20} \n                          color={colors.text.secondary} \n                        />\n                      </Pressable>\n                    </View>\n                  </View>\n                </ScrollView>\n              </View>\n            ) : (\n              <View style={styles.contentWrapper}>\n                <ScrollView style={styles.scrollView} contentContainerStyle={styles.scrollContent}>\n                  <View style={styles.content}>\n                    <View style={styles.headerWithAction}>\n                      <Text style={[styles.contentTitle, { color: colors.text.primary }]}>Visible Columns</Text>\n                      {columns.some(col => !col.isVisible) && (\n                        <Pressable \n                          onPress={handleResetColumns}\n                          style={[styles.clearButton, { backgroundColor: colors.background.secondary }]}\n                        >\n                          <Text style={[styles.clearButtonText, { color: colors.text.secondary }]}>Reset</Text>\n                        </Pressable>\n                      )}\n                    </View>\n                    <View style={styles.columnList}>\n                      {columns.map(column => (\n                        <Pressable\n                          key={column.id}\n                          style={styles.columnItem}\n                          onPress={() => handleColumnVisibilityChange(column.id)}\n                        >\n                          <Text style={[styles.columnLabel, { color: colors.text.primary }]}>{column.label}</Text>\n                          <View style={[\n                            styles.checkbox,\n                            { borderColor: colors.border },\n                            column.isVisible && [styles.checkboxChecked, { backgroundColor: colors.primary, borderColor: colors.primary }]\n                          ]}>\n                            {column.isVisible && (\n                              <MaterialIcons name=\"check\" size={16} color={colors.text.inverse} />\n                            )}\n                          </View>\n                        </Pressable>\n                      ))}\n                    </View>\n                  </View>\n                </ScrollView>\n              </View>\n            )}\n          </Pressable>\n        </Pressable>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      transition: 'all 0.2s ease',\n    }),\n  },\n  modalOverlay: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    borderRadius: 8,\n    width: '90%',\n    maxWidth: 480,\n    maxHeight: '90%',\n    overflow: 'hidden',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  closeButton: {\n    padding: 4,\n  },\n  tabs: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n  },\n  tab: {\n    flex: 1,\n    padding: 12,\n    alignItems: 'center',\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n  },\n  tabText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  activeTabText: {\n    // Remove static color reference since we're applying it dynamically\n  },\n  content: {\n    padding: 16,\n    width: '100%',\n  },\n  contentWrapper: {\n    flex: 1,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  chipContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  chip: {\n    borderRadius: 16,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n  },\n  chipSelected: {},\n  chipText: {\n    fontSize: 14,\n  },\n  chipTextSelected: {},\n  columnList: {\n    gap: 12,\n  },\n  columnItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  columnLabel: {\n    fontSize: 14,\n  },\n  checkbox: {\n    width: 20,\n    height: 20,\n    borderRadius: 4,\n    borderWidth: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkboxChecked: {},\n  headerWithAction: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  contentTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  clearButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n  },\n  clearButtonText: {\n    fontSize: 14,\n  },\n  noSeriesText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  themeSection: {\n    marginTop: 32,\n  },\n  themeToggle: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 12,\n    borderRadius: 8,\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n    }),\n  },\n  themeToggleContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  themeToggleText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n}); ","// Supabase Configuration\nexport const SUPABASE_URL = 'https://zhylhvuhhoialsgqrxxr.supabase.co';\nexport const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpoeWxodnVoaG9pYWxzZ3FyeHhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzkxNjM3NTgsImV4cCI6MjA1NDczOTc1OH0.wrZ05wA3EcbBubG3Mrxmx--fA9ThE2_M9k9WYTmGpag';\n\n// Google OAuth Configuration\nexport const GOOGLE_CLIENT_ID = '159399186219-fagq1jdgjps8q6fq70e9ua8pnmjac7bs.apps.googleusercontent.com'; ","import { createClient } from '@supabase/supabase-js';\nimport { Platform } from 'react-native';\nimport { SUPABASE_URL, SUPABASE_ANON_KEY } from '../config/env';\n\n// Initialize the Supabase client\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  auth: {\n    detectSessionInUrl: Platform.OS === 'web',\n    flowType: 'pkce',\n  },\n}); ","import React from 'react';\nimport { TouchableOpacity, StyleSheet, Text, ActivityIndicator, Alert } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { colors } from '../theme/colors';\nimport { useGoogleAuth } from '../hooks/useGoogleAuth';\nimport { AuthError } from '@supabase/supabase-js';\n\ninterface GoogleSignInProps {\n  onSuccess?: () => void;\n}\n\nexport const GoogleSignIn = ({ onSuccess }: GoogleSignInProps) => {\n  const { signInWithGoogle, isLoading } = useGoogleAuth();\n\n  const handleSignIn = async () => {\n    try {\n      const { error } = await signInWithGoogle();\n      \n      if (error) {\n        Alert.alert('Sign In Error', error instanceof AuthError ? error.message : 'Failed to sign in');\n        return;\n      }\n\n      onSuccess?.();\n    } catch (error) {\n      Alert.alert('Error', 'An unexpected error occurred during sign in.');\n      console.error('Sign in error:', error);\n    }\n  };\n\n  return (\n    <TouchableOpacity\n      style={styles.button}\n      onPress={handleSignIn}\n      disabled={isLoading}\n    >\n      {isLoading ? (\n        <ActivityIndicator color={colors.text.inverse} />\n      ) : (\n        <>\n          <Ionicons name=\"logo-google\" size={24} color={colors.text.inverse} style={styles.icon} />\n          <Text style={styles.buttonText}>Sign in with Google</Text>\n        </>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: colors.primary,\n    padding: 12,\n    borderRadius: 8,\n    minWidth: 220,\n  },\n  buttonText: {\n    color: colors.text.inverse,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  icon: {\n    marginRight: 8,\n  },\n}); ","import { useState } from 'react';\nimport { Platform } from 'react-native';\nimport { supabase } from '../utils/supabase';\nimport { GOOGLE_CLIENT_ID } from '../config/env';\n\n// Get the Google OAuth redirect URL for web\nconst getRedirectUrl = () => {\n  if (Platform.OS !== 'web') {\n    console.log('🚫 Not a web platform');\n    return undefined;\n  }\n\n  // Get the current origin and log all relevant URL information\n  const origin = window.location.origin;\n  const hostname = window.location.hostname;\n  \n  console.log('📍 Current URL info:', {\n    origin,\n    hostname,\n    fullUrl: window.location.href\n  });\n  \n  // Map localhost:19006 (Expo dev) to localhost:3000\n  if (hostname === 'localhost' || hostname.includes('127.0.0.1')) {\n    const redirectUrl = 'http://localhost:3000/auth/callback';\n    console.log('🔄 Development redirect:', redirectUrl);\n    return redirectUrl;\n  }\n  \n  // For staging and production, use the actual origin\n  const redirectUrl = `${origin}/auth/callback`;\n  console.log('🔄 Production/staging redirect:', redirectUrl);\n  return redirectUrl;\n};\n\n// Make sure to configure these URLs in Google Cloud Console:\n// Development:\n// - Origins: http://localhost:19006, http://localhost:3000\n// - Redirect: http://localhost:3000/auth/callback\n//\n// Staging:\n// - Origin: https://staging.foilquiver.com\n// - Redirect: https://staging.foilquiver.com/auth/callback\n//\n// Production:\n// - Origin: https://foilquiver.com\n// - Redirect: https://foilquiver.com/auth/callback\n\nexport const useGoogleAuth = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const signInWithGoogle = async () => {\n    try {\n      setIsLoading(true);\n      if (Platform.OS !== 'web') {\n        console.warn('Mobile authentication not yet implemented');\n        return { data: null, error: new Error('Mobile authentication not yet implemented') };\n      }\n\n      const redirectTo = getRedirectUrl();\n      console.log('🔑 Starting Google OAuth with config:', {\n        redirectTo,\n        provider: 'google'\n      });\n\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo,\n          queryParams: {\n            access_type: 'offline',\n            prompt: 'consent',\n          },\n        },\n      });\n\n      if (error) {\n        console.error('❌ OAuth error:', error);\n      } else {\n        console.log('✅ OAuth initiated successfully');\n      }\n\n      return { data, error };\n    } catch (error) {\n      console.error('❌ Unexpected error:', error);\n      return { data: null, error };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    signInWithGoogle,\n    isLoading,\n  };\n}; ","import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, Modal, Alert, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { supabase } from '../utils/supabase';\nimport { colors } from '../theme/colors';\nimport { GoogleSignIn } from './GoogleSignIn';\nimport { Session, User } from '@supabase/supabase-js';\n\nexport const UserMenu = () => {\n  const [isMenuVisible, setIsMenuVisible] = useState(false);\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthModalVisible, setIsAuthModalVisible] = useState(false);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      if (session) {\n        console.log('User logged in:', session.user);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const handleSignOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      setSession(null);\n      setUser(null);\n      setIsMenuVisible(false);\n    } catch (error) {\n      Alert.alert('Error', 'Failed to sign out');\n      console.error('Sign out error:', error);\n    }\n  };\n\n  const renderAuthModal = () => (\n    <Modal\n      visible={isAuthModalVisible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={() => setIsAuthModalVisible(false)}\n    >\n      <TouchableOpacity\n        style={styles.modalOverlay}\n        activeOpacity={1}\n        onPress={() => setIsAuthModalVisible(false)}\n      >\n        <View style={styles.modalContent} onStartShouldSetResponder={() => true}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>Sign In</Text>\n            <TouchableOpacity onPress={() => setIsAuthModalVisible(false)}>\n              <Ionicons name=\"close\" size={24} color={colors.text.primary} />\n            </TouchableOpacity>\n          </View>\n          <GoogleSignIn onSuccess={() => setIsAuthModalVisible(false)} />\n        </View>\n      </TouchableOpacity>\n    </Modal>\n  );\n\n  if (!session) {\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity\n          style={styles.signInButton}\n          onPress={() => setIsAuthModalVisible(true)}\n        >\n          <Text style={styles.signInText}>Sign In</Text>\n        </TouchableOpacity>\n        {renderAuthModal()}\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        style={styles.profileButton}\n        onPress={() => setIsMenuVisible(!isMenuVisible)}\n      >\n        {user?.user_metadata?.avatar_url ? (\n          <Image \n            source={{ uri: user.user_metadata.avatar_url }} \n            style={styles.avatar}\n          />\n        ) : (\n          <Ionicons name=\"person-circle-outline\" size={24} color={colors.text.primary} />\n        )}\n      </TouchableOpacity>\n      \n      {isMenuVisible && (\n        <View style={styles.menu}>\n          <View style={styles.userInfo}>\n            <Text style={styles.userName}>{user?.user_metadata?.full_name || user?.email}</Text>\n            <Text style={styles.userEmail}>{user?.email}</Text>\n          </View>\n          <View style={styles.menuDivider} />\n          <TouchableOpacity style={styles.menuItem} onPress={handleSignOut}>\n            <Ionicons name=\"log-out-outline\" size={20} color={colors.text.primary} />\n            <Text style={styles.menuItemText}>Sign Out</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'relative',\n  },\n  signInButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n    backgroundColor: colors.primary,\n  },\n  signInText: {\n    color: colors.text.inverse,\n    fontWeight: '600',\n  },\n  profileButton: {\n    padding: 8,\n  },\n  avatar: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n  },\n  menu: {\n    position: 'absolute',\n    top: '100%',\n    right: 0,\n    backgroundColor: colors.background.primary,\n    borderRadius: 8,\n    padding: 8,\n    minWidth: 240,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  userInfo: {\n    padding: 12,\n  },\n  userName: {\n    color: colors.text.primary,\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  userEmail: {\n    color: colors.text.secondary,\n    fontSize: 14,\n  },\n  menuDivider: {\n    height: 1,\n    backgroundColor: colors.border,\n    marginVertical: 8,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    gap: 8,\n  },\n  menuItemText: {\n    color: colors.text.primary,\n    fontSize: 16,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: colors.background.primary,\n    borderRadius: 12,\n    padding: 24,\n    width: '90%',\n    maxWidth: 400,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: colors.text.primary,\n  },\n}); ","import React, { lazy, Suspense, useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, Pressable, Platform, useWindowDimensions } from 'react-native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useNavigation } from '@react-navigation/native';\nimport { RootStackParamList, RootStackNavigationProp } from '../types/navigation';\nimport { SearchBar } from '../components/SearchBar';\nimport { LoadingIndicator } from '../components/LoadingIndicator';\nimport { TableSettings } from '../components/TableSettings';\nimport { useTheme } from '../theme/ThemeContext';\nimport { useFoils } from '../hooks/useFoils';\nimport { useFilteredFoils } from '../hooks/useFilteredFoils';\nimport { FilterOptions } from '../types/filters';\nimport { CONTAINER_PADDING, MOBILE_BREAKPOINT, DEFAULT_COLUMNS, getTableWidth, getContentWidth, Column } from '../constants/layout';\nimport { loadColumns, loadFilters, saveFilters } from '../utils/storage';\nimport { UserMenu } from '../components/UserMenu';\n\n// Lazy load screens\nconst BrowseScreen = lazy(() => import('../screens/BrowseScreen'));\nconst PrivacyPolicy = lazy(() => import('../screens/legal/PrivacyPolicy'));\nconst TermsOfService = lazy(() => import('../screens/legal/TermsOfService'));\nconst Contact = lazy(() => import('../screens/legal/Contact'));\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\ninterface AppNavigatorProps {\n  searchQuery: string;\n  onSearch: (text: string) => void;\n}\n\nconst COLUMN_WIDTHS = {\n  brand: 100,\n  series: 120,\n  model: 150,\n  area: 80,\n  wingspan: 80,\n  aspectRatio: 80,\n  type: 80,\n  price: 105,\n  link: 80,\n} as const;\n\nexport const AppNavigator = ({ searchQuery, onSearch }: AppNavigatorProps) => {\n  const navigation = useNavigation<RootStackNavigationProp>();\n  const { colors } = useTheme();\n  const { foils } = useFoils();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [columns, setColumns] = useState<Column[]>(DEFAULT_COLUMNS);\n  const [filters, setFilters] = useState<FilterOptions>({\n    brands: [],\n    series: [],\n    type: []\n  });\n  const { filterOptions } = useFilteredFoils(foils, filters);\n  const { width } = useWindowDimensions();\n  const isMobile = width < MOBILE_BREAKPOINT;\n\n  // Load saved column settings on mount\n  useEffect(() => {\n    const loadSavedColumnSettings = async () => {\n      try {\n        const savedColumns = await loadColumns();\n        if (savedColumns) {\n          const updatedColumns = DEFAULT_COLUMNS.map(col => ({\n            ...col,\n            isVisible: typeof savedColumns[col.id] === 'boolean' ? savedColumns[col.id] : col.isVisible\n          }));\n          setColumns(updatedColumns);\n        }\n      } catch (error) {\n        console.error('Error loading column settings:', error);\n      } finally {\n        setIsInitialized(true);\n      }\n    };\n\n    loadSavedColumnSettings();\n  }, []);\n\n  // Load saved filter settings on mount\n  useEffect(() => {\n    const loadSavedSettings = async () => {\n      try {\n        const savedFilters = await loadFilters();\n        if (savedFilters) {\n          setFilters({\n            brands: savedFilters.brands || [],\n            series: savedFilters.series || [],\n            type: savedFilters.types || []\n          });\n        }\n      } catch (error) {\n        console.error('Error loading filter settings:', error);\n      }\n    };\n\n    loadSavedSettings();\n  }, []);\n\n  // Save filters whenever they change\n  useEffect(() => {\n    const saveFilterSettings = async () => {\n      try {\n        await saveFilters({\n          brands: filters.brands,\n          series: filters.series,\n          types: filters.type\n        });\n      } catch (error) {\n        console.error('Error saving filter settings:', error);\n      }\n    };\n\n    saveFilterSettings();\n  }, [filters]);\n\n  const handleLogoPress = () => {\n    // Only reset the search query, preserve filters\n    onSearch('');\n    // Update navigation params\n    navigation.setParams({ searchQuery: '' });\n  };\n\n  const handleSearch = (text: string) => {\n    onSearch(text);\n    // Update navigation params when search changes\n    navigation.setParams({ searchQuery: text });\n  };\n\n  const handleFilterChange = (type: keyof FilterOptions, value: string) => {\n    setFilters(prev => {\n      const newFilters = { ...prev };\n      if (type === 'type') {\n        const array = prev.type as string[];\n        newFilters.type = array.includes(value)\n          ? array.filter(item => item !== value)\n          : [...array, value];\n      } else {\n        const array = prev[type] as string[];\n        newFilters[type] = array.includes(value)\n          ? array.filter(item => item !== value)\n          : [...array, value];\n      }\n      return newFilters;\n    });\n  };\n\n  const handleColumnVisibilityChange = (columnId: string) => {\n    setColumns(prev => {\n      const newColumns = prev.map(col => \n        col.id === columnId ? { ...col, isVisible: !col.isVisible } : col\n      );\n      return newColumns;\n    });\n  };\n\n  const handleClearFilters = async () => {\n    setFilters({\n      brands: [],\n      series: [],\n      type: []\n    });\n  };\n\n  const handleResetColumns = () => {\n    setColumns(DEFAULT_COLUMNS);\n  };\n\n  // Calculate table width based on visible columns\n  const tableWidth = React.useMemo(() => getTableWidth(columns), [columns]);\n\n  const contentWidth = React.useMemo(() => \n    getContentWidth(tableWidth, width, isMobile), \n    [tableWidth, width, isMobile]\n  );\n\n  // Don't render the main content until column settings are loaded\n  if (!isInitialized) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: colors.background.primary,\n        },\n        headerShadowVisible: false,\n      }}\n    >\n      <Stack.Screen \n        name=\"Browse\"\n        options={{\n          headerTitle: '',\n          headerLeft: () => (\n            <View style={[\n              styles.headerOuterContainer,\n              { backgroundColor: colors.background.primary },\n              !isMobile && { alignItems: 'center' }\n            ]}>\n              {isMobile ? (\n                // Mobile Layout\n                <View style={styles.headerMainContainerMobile}>\n                  <Pressable \n                    onPress={handleLogoPress}\n                    style={({ pressed }) => [\n                      styles.logoContainer,\n                      pressed && styles.logoPressed\n                    ]}\n                  >\n                    <Text style={[styles.headerTitle, { color: colors.primary }]}>FoilQuiver</Text>\n                  </Pressable>\n                </View>\n              ) : (\n                // Web Layout\n                <View style={[\n                  styles.headerMainContainerWeb,\n                  { width: contentWidth }\n                ]}>\n                  <View style={styles.headerContentWeb}>\n                    <Pressable \n                      onPress={handleLogoPress}\n                      style={({ pressed }) => [\n                        styles.logoContainer,\n                        pressed && styles.logoPressed\n                      ]}\n                    >\n                      <Text style={[styles.headerTitle, { color: colors.primary }]}>FoilQuiver</Text>\n                    </Pressable>\n                    <View style={styles.searchBarContainerWeb}>\n                      <SearchBar \n                        value={searchQuery}\n                        onChangeText={handleSearch}\n                        onClear={() => handleSearch('')}\n                      />\n                    </View>\n                    <TableSettings\n                      filterOptions={filterOptions}\n                      selectedBrands={filters.brands}\n                      selectedSeries={filters.series}\n                      selectedTypes={filters.type}\n                      onFilterChange={handleFilterChange}\n                      onClearFilters={handleClearFilters}\n                      columns={columns}\n                      onColumnVisibilityChange={handleColumnVisibilityChange}\n                      onResetColumns={handleResetColumns}\n                      foils={foils}\n                    />\n                  </View>\n                </View>\n              )}\n            </View>\n          ),\n          headerRight: () => isMobile ? (\n            <View style={styles.headerRightContainerMobile}>\n              <View style={styles.searchBarContainerMobile}>\n                <SearchBar \n                  value={searchQuery}\n                  onChangeText={handleSearch}\n                  onClear={() => handleSearch('')}\n                />\n              </View>\n              <TableSettings\n                filterOptions={filterOptions}\n                selectedBrands={filters.brands}\n                selectedSeries={filters.series}\n                selectedTypes={filters.type}\n                onFilterChange={handleFilterChange}\n                onClearFilters={handleClearFilters}\n                columns={columns}\n                onColumnVisibilityChange={handleColumnVisibilityChange}\n                onResetColumns={handleResetColumns}\n                foils={foils}\n              />\n              <UserMenu />\n            </View>\n          ) : (\n            <View style={styles.headerRightContainerWeb}>\n              <UserMenu />\n            </View>\n          ),\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <BrowseScreen \n              {...props} \n              filters={filters}\n              onFilterChange={handleFilterChange}\n              columns={columns}\n            />\n          </Suspense>\n        )}\n      </Stack.Screen>\n      <Stack.Screen \n        name=\"Terms\"\n        options={{\n          title: 'Terms of Service',\n          headerStyle: {\n            backgroundColor: colors.background.primary,\n          },\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <TermsOfService {...props} />\n          </Suspense>\n        )}\n      </Stack.Screen>\n      <Stack.Screen \n        name=\"Privacy\"\n        options={{\n          title: 'Privacy Policy',\n          headerStyle: {\n            backgroundColor: colors.background.primary,\n          },\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <PrivacyPolicy {...props} />\n          </Suspense>\n        )}\n      </Stack.Screen>\n      <Stack.Screen \n        name=\"Contact\"\n        options={{\n          title: 'Contact Us',\n          headerStyle: {\n            backgroundColor: colors.background.primary,\n          },\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <Contact {...props} />\n          </Suspense>\n        )}\n      </Stack.Screen>\n    </Stack.Navigator>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerOuterContainer: {\n    flex: 1,\n    paddingHorizontal: CONTAINER_PADDING,\n  },\n  // Mobile Styles\n  headerMainContainerMobile: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: 56,\n    width: '100%',\n  },\n  headerRightContainerMobile: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    paddingRight: 12,\n  },\n  searchBarContainerMobile: {\n    width: 160,\n    height: 36,\n  },\n  // Web Styles\n  headerMainContainerWeb: {\n    height: 72,\n    width: '100%',\n  },\n  headerContentWeb: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 24,\n    height: '100%',\n    width: '100%',\n  },\n  searchBarContainerWeb: {\n    flex: 1,\n    height: 40,\n  },\n  // Common Styles\n  logoContainer: {\n    height: '100%',\n    justifyContent: 'center',\n    minWidth: 120,\n  },\n  logoPressed: {\n    opacity: 0.7,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  headerRightContainerWeb: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n    paddingRight: CONTAINER_PADDING,\n  },\n}); ","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n    error: null\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <View style={styles.container}>\n          <Text style={styles.text}>Something went wrong.</Text>\n          <Text style={styles.errorText}>{this.state.error?.message}</Text>\n        </View>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  text: {\n    fontSize: 16,\n    marginBottom: 10,\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 14,\n  },\n}); ","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import React, { useRef, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNavigationContainerRef, LinkingOptions } from '@react-navigation/native';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { AppNavigator } from './src/navigation/AppNavigator';\nimport { ErrorBoundary } from './src/components/ErrorBoundary';\nimport { ThemeProvider } from './src/theme/ThemeContext';\nimport { LoadingIndicator } from './src/components/LoadingIndicator';\nimport { routes } from './src/utils/routes';\nimport { RootStackParamList } from './src/types/navigation';\n\nexport default function App() {\n  const navigationRef = createNavigationContainerRef<RootStackParamList>();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const linking: LinkingOptions<RootStackParamList> = {\n    prefixes: ['https://foilquiver.com', 'foilquiver://'],\n    config: {\n      screens: {\n        Browse: routes.browse,\n        Terms: routes.terms,\n        Privacy: routes.privacy,\n        Contact: routes.contact,\n        Comparison: routes.comparison,\n      },\n    },\n  };\n\n  return (\n    <ThemeProvider>\n      <HelmetProvider>\n        <ErrorBoundary>\n          <SafeAreaProvider>\n            <NavigationContainer \n              ref={navigationRef}\n              linking={linking}\n              fallback={<LoadingIndicator />}\n            >\n              <AppNavigator \n                searchQuery={searchQuery}\n                onSearch={handleSearch}\n              />\n            </NavigationContainer>\n          </SafeAreaProvider>\n        </ErrorBoundary>\n      </HelmetProvider>\n    </ThemeProvider>\n  );\n} ","export const routes = {\n  browse: 'browse',\n  terms: 'terms',\n  privacy: 'privacy',\n  contact: 'contact',\n  comparison: 'comparison',\n};\n\n// Add a helper function to clean routes for navigation\nexport const cleanRoute = (route: string) => route.slice(1); // Remove leading slash \n\nexport const getRouteFromPath = (path: string) => {\n  return path.startsWith('/') ? path : `/${path}`;\n}; ","import React from 'react';\nimport { ActivityIndicator, View, StyleSheet } from 'react-native';\n\nexport function LoadingIndicator() {\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}); ","// Layout constants\nexport const CONTAINER_PADDING = 16;\nexport const MAX_CONTENT_WIDTH = 1200;\nexport const MOBILE_BREAKPOINT = 768;\n\n// Column width constants\nexport const COLUMN_WIDTHS = {\n  brand: 100,\n  series: 120,\n  model: 150,\n  area: 80,\n  wingspan: 80,\n  aspectRatio: 80,\n  type: 80,\n  price: 105,\n  link: 80,\n} as const;\n\nexport type Column = {\n  id: keyof typeof COLUMN_WIDTHS;\n  label: string;\n  isVisible: boolean;\n};\n\n// Default column configuration\nexport const DEFAULT_COLUMNS: Column[] = [\n  { id: 'brand', label: 'Brand', isVisible: true },\n  { id: 'series', label: 'Series', isVisible: false },\n  { id: 'model', label: 'Model', isVisible: true },\n  { id: 'area', label: 'Area', isVisible: true },\n  { id: 'wingspan', label: 'Span', isVisible: true },\n  { id: 'aspectRatio', label: 'AR', isVisible: true },\n  { id: 'type', label: 'Type', isVisible: true },\n  { id: 'price', label: 'Price', isVisible: true },\n  { id: 'link', label: 'Link', isVisible: true },\n];\n\n// Helper functions for width calculations\nexport const getTableWidth = (columns: Column[]) => {\n  return columns.reduce((total, column) => {\n    if (column.isVisible) {\n      return total + (COLUMN_WIDTHS[column.id] || 100);\n    }\n    return total;\n  }, 0);\n};\n\nexport const getContentWidth = (tableWidth: number, screenWidth: number, isMobile: boolean) => {\n  if (isMobile) {\n    return screenWidth;\n  }\n  return Math.min(tableWidth, screenWidth - 48);\n}; ","import { useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { FilterOptions } from '../types/filters';\nimport { groupFoilsByBrand, groupFoilsBySeries } from '../utils/dataTransform';\n\nexport function useFilteredFoils(foils: BaseProduct[], filters: FilterOptions) {\n  const filterOptions = useMemo(() => {\n    const brands = Array.from(new Set(foils.map(foil => foil.brand))).sort();\n    \n    // Group foils by brand\n    const foilsByBrand = groupFoilsByBrand(foils);\n    \n    // Get series based on selected brands\n    let availableSeries: string[] = [];\n    if (filters.brands.length === 0) {\n      // If no brands selected, show all series\n      availableSeries = Array.from(new Set(foils.map(foil => foil.series))).sort();\n    } else {\n      // If brands are selected, only show series from those brands\n      const filteredFoils = filters.brands.flatMap(brand => foilsByBrand[brand] || []);\n      availableSeries = Array.from(new Set(filteredFoils.map(foil => foil.series))).sort();\n    }\n\n    const types = ['front', 'tail'];\n\n    return { brands, series: availableSeries, types };\n  }, [foils, filters.brands]);\n\n  const filteredFoils = useMemo(() => {\n    return foils.filter(foil => {\n      const brandMatch = filters.brands.length === 0 || filters.brands.includes(foil.brand);\n      const seriesMatch = filters.series.length === 0 || filters.series.includes(foil.series);\n      const typeMatch = filters.type.length === 0 || filters.type.includes(foil.type);\n\n      return brandMatch && seriesMatch && typeMatch;\n    });\n  }, [foils, filters.brands, filters.series, filters.type]);\n\n  return {\n    filteredFoils,\n    filterOptions,\n  };\n} ","import { BaseProduct } from '../types/scraper';\n\nexport function formatMeasurement(value: number, unit: string): string {\n  return `${value}${unit}`;\n}\n\nexport function convertArea(cmSquared: number): number {\n  return Math.round(cmSquared * 0.155); // Convert to square inches\n}\n\nexport function calculateAspectRatio(wingspan: number, area: number): number {\n  return Math.round((wingspan * wingspan / area) * 100) / 100;\n}\n\nexport function groupFoilsByBrand(foils: BaseProduct[]): Record<string, BaseProduct[]> {\n  return foils.reduce((acc, foil) => {\n    if (!acc[foil.brand]) {\n      acc[foil.brand] = [];\n    }\n    acc[foil.brand].push(foil);\n    return acc;\n  }, {} as Record<string, BaseProduct[]>);\n}\n\nexport function groupFoilsBySeries(foils: BaseProduct[]): Record<string, BaseProduct[]> {\n  return foils.reduce((acc, foil) => {\n    if (!acc[foil.series]) {\n      acc[foil.series] = [];\n    }\n    acc[foil.series].push(foil);\n    return acc;\n  }, {} as Record<string, BaseProduct[]>);\n}\n\nexport function getUniqueValues(foils: BaseProduct[], key: keyof BaseProduct): string[] {\n  return Array.from(new Set(foils.map(foil => foil[key] as string))).sort();\n} ","import { BaseProduct } from '../types/scraper';\nimport { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport class ProductService {\n  private static isWeb = Platform.OS === 'web';\n  private static DATA_PATH = '/data/foils.json';\n  private static CACHE_DIR = '.cache';\n\n  // Get base URL for data loading\n  private static getBaseUrl(): string {\n    if (process.env.NODE_ENV === 'development') {\n      return '';\n    }\n    return process.env.NODE_ENV === 'staging' \n      ? 'https://staging.foilquiver.com'\n      : 'https://foilquiver.com';\n  }\n\n  static async getAllProducts(): Promise<BaseProduct[]> {\n    try {\n      if (this.isWeb) {\n        const baseUrl = this.getBaseUrl();\n\n        // Try loading from data directory first\n        try {\n          const response = await fetch(`${baseUrl}${this.DATA_PATH}`);\n          if (response.ok) {\n            const products = await response.json();\n            console.log(`Loaded ${products.length} products from ${this.DATA_PATH}`);\n            return products;\n          } else {\n            console.warn(`Failed to load from ${this.DATA_PATH} (${response.status}), trying .cache directory...`);\n          }\n        } catch (error) {\n          console.warn(`Failed to load from ${this.DATA_PATH}, trying .cache directory...`, error);\n        }\n\n        // Try loading from .cache as fallback\n        try {\n          // Normalize brand names to match file names\n          const brands = ['armstrong', 'lift-foils', 'axis-foils', 'code-foils', 'kt-foils', 'uni-foil'];\n          const allProducts: BaseProduct[] = [];\n          \n          for (const brand of brands) {\n            try {\n              const response = await fetch(`${baseUrl}/${this.CACHE_DIR}/${brand}.json`);\n              if (response.ok) {\n                const products = await response.json();\n                console.log(`Loaded ${products.length} products for ${brand} from .cache`);\n                allProducts.push(...products);\n              }\n            } catch (error) {\n              console.warn(`No cache file found for ${brand}`);\n            }\n          }\n\n          if (allProducts.length > 0) {\n            return allProducts;\n          }\n        } catch (error) {\n          console.warn('Failed to load from .cache directory', error);\n        }\n      } else {\n        // For mobile, use AsyncStorage\n        const cached = await AsyncStorage.getItem('foils');\n        if (cached) {\n          const products = JSON.parse(cached);\n          console.log(`Loaded ${products.length} products from AsyncStorage`);\n          return products;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading foils data:', error);\n    }\n    \n    console.warn('No foils data found in any location');\n    return [];\n  }\n} ","import { useState, useEffect } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { ProductService } from '../services/productService';\n\nexport function useFoils() {\n  const [foils, setFoils] = useState<BaseProduct[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadFoils = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const products = await ProductService.getAllProducts();\n      setFoils(products);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load foils');\n      console.error('Error loading foils:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadFoils();\n  }, []);\n\n  const refreshFoils = () => {\n    loadFoils();\n  };\n\n  return {\n    foils,\n    loading,\n    error,\n    refreshFoils\n  };\n} ","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useColorScheme } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getColors, ThemeColors } from './colors';\n\ntype ThemeContextType = {\n  isDark: boolean;\n  colors: ThemeColors;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nconst THEME_STORAGE_KEY = '@foilquiver/theme';\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const systemColorScheme = useColorScheme();\n  const [isDark, setIsDark] = useState<boolean>(systemColorScheme === 'dark');\n\n  useEffect(() => {\n    // Load saved theme preference\n    const loadTheme = async () => {\n      try {\n        const savedTheme = await AsyncStorage.getItem(THEME_STORAGE_KEY);\n        if (savedTheme !== null) {\n          setIsDark(savedTheme === 'dark');\n        }\n      } catch (error) {\n        console.error('Error loading theme:', error);\n      }\n    };\n\n    loadTheme();\n  }, []);\n\n  const toggleTheme = async () => {\n    try {\n      const newTheme = !isDark;\n      setIsDark(newTheme);\n      await AsyncStorage.setItem(THEME_STORAGE_KEY, newTheme ? 'dark' : 'light');\n    } catch (error) {\n      console.error('Error saving theme:', error);\n    }\n  };\n\n  const colors = getColors(isDark ? 'dark' : 'light');\n\n  return (\n    <ThemeContext.Provider value={{ isDark, colors, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; ","import { ColorSchemeName } from 'react-native';\n\nexport type ThemeColors = {\n  background: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n  };\n  text: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n    inverse: string;\n  };\n  border: string;\n  primary: string;\n  error: string;\n  success: string;\n  warning: string;\n};\n\nconst lightColors: ThemeColors = {\n  background: {\n    primary: '#FFFFFF',\n    secondary: '#F5F7FA',\n    tertiary: '#E5E5E5',\n  },\n  text: {\n    primary: '#1A1A1A',\n    secondary: '#4A4A4A',\n    tertiary: '#717171',\n    inverse: '#FFFFFF',\n  },\n  border: 'rgba(0, 0, 0, .1)',\n  primary: '#BF3475',\n  error: '#FF3B30',\n  success: '#34C759',\n  warning: '#FF9500',\n};\n\nconst darkColors: ThemeColors = {\n  background: {\n    primary: '#1A1A1A',\n    secondary: '#2A2A2A',\n    tertiary: '#3A3A3A',\n  },\n  text: {\n    primary: '#FFFFFF',\n    secondary: '#CCCCCC',\n    tertiary: '#999999',\n    inverse: '#1A1A1A',\n  },\n  border: '#404040',\n  primary: '#FC8890',\n  error: '#FF453A',\n  success: '#32D74B',\n  warning: '#FF9F0A',\n};\n\nexport const getColors = (colorScheme: ColorSchemeName): ThemeColors => {\n  return colorScheme === 'dark' ? darkColors : lightColors;\n};\n\n// For backward compatibility\nexport const colors = lightColors; \n\n","type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nclass Logger {\n  private static instance: Logger;\n  private isDevelopment = __DEV__;\n\n  private constructor() {}\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private log(level: LogLevel, message: string, ...args: any[]) {\n    if (this.isDevelopment) {\n      const timestamp = new Date().toISOString();\n      const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n      \n      switch (level) {\n        case 'debug':\n          console.debug(formattedMessage, ...args);\n          break;\n        case 'info':\n          console.info(formattedMessage, ...args);\n          break;\n        case 'warn':\n          console.warn(formattedMessage, ...args);\n          break;\n        case 'error':\n          console.error(formattedMessage, ...args);\n          break;\n      }\n    }\n  }\n\n  debug(message: string, ...args: any[]) {\n    this.log('debug', message, ...args);\n  }\n\n  info(message: string, ...args: any[]) {\n    this.log('info', message, ...args);\n  }\n\n  warn(message: string, ...args: any[]) {\n    this.log('warn', message, ...args);\n  }\n\n  error(message: string, ...args: any[]) {\n    this.log('error', message, ...args);\n  }\n}\n\nexport const logger = Logger.getInstance(); ","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { logger } from './logger';\nimport { FilterOptions } from '../types/filters';\nimport { SortField } from '../hooks/useSortedFoils';\n\nconst STORAGE_KEYS = {\n  FILTERS: '@foilquiver/filters',\n  COLUMNS: '@foilquiver/columns',\n  THEME: '@foilquiver/theme',\n  SORT: '@foilquiver/sort',\n} as const;\n\nexport interface StoredFilters {\n  brands: string[];\n  series: string[];\n  types: string[];\n}\n\nexport interface StoredColumns {\n  [key: string]: boolean;\n}\n\nexport interface StoredSort {\n  field: SortField;\n  ascending: boolean;\n}\n\nclass Storage {\n  async set(key: string, value: any): Promise<void> {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(key, jsonValue);\n    } catch (error) {\n      logger.error('Error setting storage item:', error);\n      throw error;\n    }\n  }\n\n  async get<T>(key: string): Promise<T | null> {\n    try {\n      const jsonValue = await AsyncStorage.getItem(key);\n      return jsonValue != null ? JSON.parse(jsonValue) : null;\n    } catch (error) {\n      logger.error('Error getting storage item:', error);\n      throw error;\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(key);\n    } catch (error) {\n      logger.error('Error removing storage item:', error);\n      throw error;\n    }\n  }\n\n  async clear(): Promise<void> {\n    try {\n      await AsyncStorage.clear();\n    } catch (error) {\n      logger.error('Error clearing storage:', error);\n      throw error;\n    }\n  }\n\n  async getAllKeys(): Promise<readonly string[]> {\n    try {\n      return await AsyncStorage.getAllKeys();\n    } catch (error) {\n      logger.error('Error getting all storage keys:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new Storage();\n\nexport const saveFilters = async (filters: StoredFilters) => {\n  try {\n    await AsyncStorage.setItem(STORAGE_KEYS.FILTERS, JSON.stringify(filters));\n  } catch (error) {\n    console.error('Error saving filters:', error);\n  }\n};\n\nexport const loadFilters = async (): Promise<StoredFilters | null> => {\n  try {\n    const savedFilters = await AsyncStorage.getItem(STORAGE_KEYS.FILTERS);\n    return savedFilters ? JSON.parse(savedFilters) : null;\n  } catch (error) {\n    console.error('Error loading filters:', error);\n    return null;\n  }\n};\n\nexport const saveColumns = async (columns: StoredColumns) => {\n  try {\n    await AsyncStorage.setItem(STORAGE_KEYS.COLUMNS, JSON.stringify(columns));\n  } catch (error) {\n    console.error('Error saving columns:', error);\n  }\n};\n\nexport const loadColumns = async (): Promise<StoredColumns | null> => {\n  try {\n    const savedColumns = await AsyncStorage.getItem(STORAGE_KEYS.COLUMNS);\n    return savedColumns ? JSON.parse(savedColumns) : null;\n  } catch (error) {\n    console.error('Error loading columns:', error);\n    return null;\n  }\n};\n\nexport const saveSortOption = async (sort: StoredSort) => {\n  try {\n    await AsyncStorage.setItem(STORAGE_KEYS.SORT, JSON.stringify(sort));\n  } catch (error) {\n    console.error('Error saving sort option:', error);\n  }\n};\n\nexport const loadSortOption = async (): Promise<StoredSort | null> => {\n  try {\n    const savedSort = await AsyncStorage.getItem(STORAGE_KEYS.SORT);\n    return savedSort ? JSON.parse(savedSort) : null;\n  } catch (error) {\n    console.error('Error loading sort option:', error);\n    return null;\n  }\n};\n\nexport const clearAllSettings = async () => {\n  try {\n    const keys = Object.values(STORAGE_KEYS);\n    await AsyncStorage.multiRemove(keys);\n  } catch (error) {\n    console.error('Error clearing settings:', error);\n  }\n}; "],"names":["SearchBar","value","onChangeText","onClear","placeholder","_jsxs","View","style","styles","container","children","_jsx","TextInput","input","placeholderTextColor","colors","text","muted","autoCapitalize","autoCorrect","length","Pressable","clearButton","onPress","Text","clearButtonText","StyleSheet","create","flex","flexDirection","alignItems","backgroundColor","background","secondary","borderRadius","paddingHorizontal","borderWidth","borderColor","border","height","minHeight","fontSize","color","primary","padding","fontWeight","TableSettings","filterOptions","selectedBrands","selectedSeries","selectedTypes","onFilterChange","onClearFilters","columns","onColumnVisibilityChange","onResetColumns","foils","isOpen","setIsOpen","useState","activeTab","setActiveTab","isDark","toggleTheme","useTheme","useEffect","async","savedFilters","loadFilters","brands","forEach","brand","series","types","type","savedColumns","loadColumns","currentColumns","Object","fromEntries","map","col","id","isVisible","entries","columnId","error","loadSavedSettings","filters","saveFilters","saveFilterSettings","columnSettings","column","saveColumns","saveColumnSettings","availableSeries","useMemo","seriesSet","Set","foil","includes","add","Array","from","sort","_Fragment","iconButton","MaterialIcons","name","size","Modal","visible","transparent","animationType","onRequestClose","modalOverlay","modalContent","e","stopPropagation","modalHeader","borderBottomColor","modalTitle","closeButton","tabs","tab","tabText","activeTabText","some","contentWrapper","ScrollView","scrollView","contentContainerStyle","scrollContent","content","headerWithAction","contentTitle","section","sectionTitle","chipContainer","chip","chipSelected","chipText","chipTextSelected","inverse","noSeriesText","themeSection","themeToggle","themeToggleContent","themeToggleText","columnList","columnItem","handleColumnVisibilityChange","columnLabel","label","checkbox","checkboxChecked","assign","width","justifyContent","Platform","OS","cursor","transition","maxWidth","maxHeight","overflow","borderBottomWidth","flexGrow","marginBottom","flexWrap","gap","paddingVertical","marginTop","supabase","createClient","auth","detectSessionInUrl","flowType","GoogleSignIn","onSuccess","signInWithGoogle","isLoading","useGoogleAuth","setIsLoading","data","Error","redirectTo","getRedirectUrl","origin","window","location","hostname","signInWithOAuth","provider","options","queryParams","access_type","prompt","TouchableOpacity","button","Alert","alert","AuthError","message","disabled","ActivityIndicator","Ionicons","icon","buttonText","minWidth","marginRight","UserMenu","isMenuVisible","setIsMenuVisible","session","setSession","user","setUser","isAuthModalVisible","setIsAuthModalVisible","getSession","then","subscription","onAuthStateChange","_event","unsubscribe","profileButton","user_metadata","avatar_url","Image","source","uri","avatar","menu","userInfo","userName","full_name","email","userEmail","menuDivider","menuItem","signOut","menuItemText","signInButton","signInText","activeOpacity","onStartShouldSetResponder","position","top","right","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","marginVertical","BrowseScreen","lazy","PrivacyPolicy","TermsOfService","Contact","Stack","createNativeStackNavigator","AppNavigator","searchQuery","onSearch","navigation","useNavigation","useFoils","isInitialized","setIsInitialized","setColumns","DEFAULT_COLUMNS","setFilters","useFilteredFoils","useWindowDimensions","isMobile","MOBILE_BREAKPOINT","updatedColumns","loadSavedColumnSettings","handleLogoPress","setParams","handleSearch","handleFilterChange","prev","newFilters","array","filter","item","handleClearFilters","handleResetColumns","tableWidth","React","getTableWidth","contentWidth","getContentWidth","Navigator","screenOptions","headerStyle","headerShadowVisible","Screen","headerTitle","headerLeft","headerOuterContainer","headerMainContainerMobile","pressed","logoContainer","logoPressed","headerMainContainerWeb","headerContentWeb","searchBarContainerWeb","headerRight","headerRightContainerMobile","searchBarContainerMobile","headerRightContainerWeb","props","Suspense","fallback","LoadingIndicator","title","CONTAINER_PADDING","paddingRight","opacity","ErrorBoundary","_Component","_this","_classCallCheck","_len","arguments","args","_key","concat","state","hasError","_inherits","_createClass","key","errorInfo","_this$state$error","this","errorText","Component","registerRootComponent","navigationRef","createNavigationContainerRef","setSearchQuery","ThemeProvider","HelmetProvider","SafeAreaProvider","NavigationContainer","ref","linking","prefixes","config","screens","Browse","Terms","Privacy","Comparison","query","COLUMN_WIDTHS","model","area","wingspan","aspectRatio","price","link","reduce","total","screenWidth","Math","min","foilsByBrand","acc","push","groupFoilsByBrand","filteredFoils","flatMap","brandMatch","seriesMatch","typeMatch","ProductService","_getAllProducts","_asyncToGenerator","isWeb","baseUrl","getBaseUrl","response","fetch","DATA_PATH","ok","json","allProducts","CACHE_DIR","products","apply","_toConsumableArray","cached","AsyncStorage","getItem","JSON","parse","_useState","_useState2","_slicedToArray","setFoils","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setError","loadFoils","_ref","getAllProducts","err","refreshFoils","ThemeContext","createContext","undefined","THEME_STORAGE_KEY","systemColorScheme","useColorScheme","setIsDark","savedTheme","loadTheme","getColors","Provider","newTheme","setItem","context","useContext","lightColors","tertiary","success","warning","darkColors","colorScheme","Logger","isDevelopment","__DEV__","constructor","getInstance","instance","log","level","Date","toISOString","toUpperCase","debug","info","warn","logger","STORAGE_KEYS","set","jsonValue","stringify","get","remove","removeItem","clear","getAllKeys","saveSortOption","loadSortOption","savedSort"],"sourceRoot":""}