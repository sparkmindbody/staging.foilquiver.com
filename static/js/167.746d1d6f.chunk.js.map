{"version":3,"file":"static/js/167.746d1d6f.chunk.js","mappings":"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","sources":["src/hooks/useSortedFoils.ts","src/utils/sorting.ts","src/components/FoilsTable.tsx","src/constants/spacing.ts","src/components/ComparisonControls.tsx","src/components/ComparisonView.tsx","src/components/Footer.tsx","src/components/SEOHead.tsx","src/screens/BrowseScreen.tsx","src/hooks/useSearchFoils.ts","src/hooks/useComparison.ts"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { sortProducts } from '../utils/sorting';\n\nexport type SortField = 'brand' | 'series' | 'model' | 'price' | 'area' | 'wingspan' | 'aspectRatio' | 'cord' | 'type' | 'link';\nexport type SortDirection = 'asc' | 'desc';\n\nexport interface SortOption {\n  field: SortField;\n  direction: SortDirection;\n}\n\nexport function useSortedFoils(foils: BaseProduct[]) {\n  const [sortOption, setSortOption] = useState<SortOption>({\n    field: 'area',\n    direction: 'desc'\n  });\n\n  const sortedFoils = useMemo(() => {\n    return sortProducts(foils, sortOption.field, sortOption.direction);\n  }, [foils, sortOption]);\n\n  return {\n    sortOption,\n    setSortOption,\n    sortedFoils\n  };\n} ","import { BaseProduct } from '../types/scraper';\nimport { SortField, SortDirection } from '../hooks/useSortedFoils';\n\nexport function sortProducts(\n  products: BaseProduct[],\n  field: SortField,\n  direction: SortDirection\n): BaseProduct[] {\n  return [...products].sort((a, b) => {\n    let valueA: string | number;\n    let valueB: string | number;\n\n    if (field === 'brand' || field === 'series' || field === 'model' || field === 'type') {\n      valueA = a[field].toLowerCase();\n      valueB = b[field].toLowerCase();\n    } else if (field === 'price') {\n      valueA = a.price || 0;\n      valueB = b.price || 0;\n    } else if (field in a.specs) {\n      valueA = a.specs[field as keyof typeof a.specs] || 0;\n      valueB = b.specs[field as keyof typeof b.specs] || 0;\n    } else {\n      valueA = '';\n      valueB = '';\n    }\n    \n    const multiplier = direction === 'asc' ? 1 : -1;\n    \n    if (typeof valueA === 'string' && typeof valueB === 'string') {\n      return valueA.localeCompare(valueB) * multiplier;\n    }\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      return (valueA - valueB) * multiplier;\n    }\n    return 0;\n  });\n} ","/**\n * FoilsTable Component\n * \n * IMPORTANT: Column Alignment\n * - The table uses fixed column widths for consistent layout and horizontal scrolling\n * - Each column width in headerCell must match the corresponding cell width\n * - Current widths:\n *   - Regular columns (brand, model, type, series): 150px\n *   - Number columns (area, wingspan, AR, price): 100px\n *   - Link column: 100px\n * - When modifying column styles, always update both headerCell and cell styles to maintain alignment\n * - Table has a minWidth of 1200px to ensure proper layout on all screen sizes\n */\n\nimport React, { useEffect } from 'react';\nimport { View, Text, Pressable, ScrollView, StyleSheet, Platform, useWindowDimensions } from 'react-native';\nimport { BaseProduct } from '../types/scraper';\nimport { SortField } from '../hooks/useSortedFoils';\nimport { useTheme } from '../theme/ThemeContext';\nimport { CONTAINER_PADDING, MOBILE_BREAKPOINT, COLUMN_WIDTHS, getTableWidth, getContentWidth, Column } from '../constants/layout';\nimport { saveSortOption, loadSortOption } from '../utils/storage';\n\ninterface FoilsTableProps {\n  foils: BaseProduct[];\n  onSort: (field: SortField) => void;\n  onFoilSelect: (foil: BaseProduct) => void;\n  isSelected: (foil: BaseProduct) => boolean;\n  sortOption: { field: SortField; ascending: boolean };\n  columns: Column[];\n  filters: {\n    brands: string[];\n    series: string[];\n    type: string[];\n  };\n}\n\nconst DEFAULT_COLUMNS = [\n  { id: 'brand', label: 'Brand', isVisible: true },\n  { id: 'series', label: 'Series', isVisible: false },\n  { id: 'model', label: 'Model', isVisible: true },\n  { id: 'area', label: 'Area', isVisible: true },\n  { id: 'wingspan', label: 'Span', isVisible: true },\n  { id: 'aspectRatio', label: 'AR', isVisible: true },\n  { id: 'type', label: 'Type', isVisible: true },\n  { id: 'price', label: 'Price', isVisible: true },\n  { id: 'link', label: 'Link', isVisible: true },\n];\n\nexport const FoilsTable: React.FC<FoilsTableProps> = ({\n  foils,\n  onSort,\n  onFoilSelect,\n  isSelected,\n  sortOption,\n  columns,\n  filters,\n}) => {\n  const { width } = useWindowDimensions();\n  const isMobile = width < MOBILE_BREAKPOINT;\n  const { colors } = useTheme();\n\n  // Load saved sort option on mount\n  useEffect(() => {\n    const loadSavedSort = async () => {\n      try {\n        const savedSort = await loadSortOption();\n        if (savedSort && (savedSort.field !== sortOption.field || savedSort.ascending !== sortOption.ascending)) {\n          onSort(savedSort.field);\n        }\n      } catch (error) {\n        console.error('Error loading sort option:', error);\n      }\n    };\n\n    loadSavedSort();\n  }, []);\n\n  // Save sort option when it changes\n  useEffect(() => {\n    const saveSortSettings = async () => {\n      try {\n        await saveSortOption({\n          field: sortOption.field,\n          ascending: sortOption.ascending\n        });\n      } catch (error) {\n        console.error('Error saving sort option:', error);\n      }\n    };\n\n    saveSortSettings();\n  }, [sortOption]);\n\n  const getColumnWidth = (columnId: string) => {\n    return COLUMN_WIDTHS[columnId as keyof typeof COLUMN_WIDTHS] || 150;\n  };\n\n  const isColumnFiltered = (columnId: string) => {\n    switch (columnId) {\n      case 'brand':\n        return filters.brands.length > 0;\n      case 'series':\n        return filters.series.length > 0;\n      case 'type':\n        return filters.type.length > 0;\n      default:\n        return false;\n    }\n  };\n\n  const renderSortIcon = (columnId: string) => {\n    if (sortOption.field !== columnId) {\n      return (\n        <View style={styles.sortIconContainer}>\n          <Text style={[styles.sortIcon, { color: colors.text.tertiary }]}>▲</Text>\n          <Text style={[styles.sortIcon, { color: colors.text.tertiary }]}>▼</Text>\n        </View>\n      );\n    }\n\n    return (\n      <View style={styles.sortIconContainer}>\n        <Text style={[\n          styles.sortIcon,\n          sortOption.ascending && [styles.sortIconUpActive, { color: colors.primary }]\n        ]}>▲</Text>\n        <Text style={[\n          styles.sortIcon,\n          !sortOption.ascending && [styles.sortIconDownActive, { color: colors.primary }]\n        ]}>▼</Text>\n      </View>\n    );\n  };\n\n  const getCellContent = (foil: BaseProduct, columnId: string) => {\n    let content: React.ReactNode = '-';\n    \n    switch (columnId) {\n      case 'brand':\n        content = foil.brand;\n        break;\n      case 'model':\n        content = foil.model;\n        break;\n      case 'series':\n        content = foil.series || '-';\n        break;\n      case 'area':\n        content = foil.specs.area?.toFixed(2) || '-';\n        break;\n      case 'wingspan':\n        content = foil.specs.wingspan?.toFixed(2) || '-';\n        break;\n      case 'aspectRatio':\n        content = foil.specs.aspectRatio?.toFixed(2) || '-';\n        break;\n      case 'type':\n        content = foil.type || '-';\n        break;\n      case 'price':\n        content = foil.price ? `$${foil.price}` : '-';\n        break;\n      case 'link':\n        return (\n          <Pressable\n            style={[styles.linkButton, { backgroundColor: colors.primary }]}\n            onPress={() => window.open(foil.sourceUrl, '_blank')}\n          >\n            <Text style={[styles.linkText, { color: colors.text.inverse }]}>View</Text>\n            <Text style={[styles.externalLinkIcon, { color: colors.text.inverse }]}>↗</Text>\n          </Pressable>\n        );\n    }\n\n    return (\n      <Text \n        style={[\n          styles.cellText,\n          { color: colors.text.primary },\n          ['area', 'wingspan', 'aspectRatio', 'price'].includes(columnId) && styles.numberText\n        ]}\n      >\n        {content}\n      </Text>\n    );\n  };\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.background.primary }]}>\n      <ScrollView \n        horizontal \n        showsHorizontalScrollIndicator={true}\n        style={[\n          styles.horizontalScrollView,\n          isMobile && {\n            marginHorizontal: -CONTAINER_PADDING,\n            paddingHorizontal: CONTAINER_PADDING\n          }\n        ]}\n      >\n        <View style={styles.tableContent}>\n          <View style={[styles.tableHeader, { backgroundColor: colors.background.secondary }]}>\n            <View style={[styles.headerRow, { borderBottomColor: colors.border }]}>\n              {columns.map(column => column.isVisible && (\n                <Pressable\n                  key={column.id}\n                  style={[\n                    styles.headerCell,\n                    { \n                      width: getColumnWidth(column.id),\n                      borderRightColor: colors.border,\n                      borderBottomColor: isColumnFiltered(column.id) ? colors.primary : colors.border \n                    },\n                    isColumnFiltered(column.id) && styles.headerCellFiltered\n                  ]}\n                  onPress={() => onSort(column.id as SortField)}\n                >\n                  <Text style={[\n                    styles.headerText,\n                    { color: isColumnFiltered(column.id) ? colors.primary : colors.text.secondary }\n                  ]}>\n                    {column.label}\n                  </Text>\n                  {renderSortIcon(column.id)}\n                </Pressable>\n              ))}\n            </View>\n          </View>\n          <ScrollView \n            style={styles.scrollView}\n            showsVerticalScrollIndicator={true}\n            bounces={false}\n          >\n            {foils.map((foil, index) => (\n              <Pressable\n                key={`${foil.brand}-${foil.model}`}\n                onPress={() => onFoilSelect(foil)}\n                style={({ pressed }) => [\n                  styles.row,\n                  { borderBottomColor: colors.border },\n                  index % 2 === 0 && [styles.rowEven, { backgroundColor: colors.background.secondary }],\n                  isSelected(foil) && [styles.rowSelected, { backgroundColor: `${colors.primary}15` }],\n                  Platform.OS === 'web' && pressed && [styles.rowHovered, { backgroundColor: `${colors.primary}10` }]\n                ]}\n              >\n                {columns.map(column => column.isVisible && (\n                  <View\n                    key={column.id}\n                    style={[\n                      styles.cell,\n                      { \n                        width: getColumnWidth(column.id),\n                        borderRightColor: colors.border\n                      }\n                    ]}\n                  >\n                    {getCellContent(foil, column.id)}\n                  </View>\n                ))}\n              </Pressable>\n            ))}\n          </ScrollView>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n  },\n  horizontalScrollView: {\n    flex: 1,\n    width: '100%',\n  },\n  tableContent: {\n    flex: 1,\n    minWidth: '100%',\n  },\n  tableHeader: {\n    borderBottomWidth: 1,\n  },\n  headerRow: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n  },\n  headerCell: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 12,\n    borderRightWidth: 1,\n    borderBottomWidth: 2,\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n    }),\n  },\n  headerCellFiltered: {\n    borderBottomWidth: 2,\n  },\n  headerText: {\n    fontWeight: '600',\n    fontSize: 14,\n    flex: 1,\n  },\n  row: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n    }),\n  },\n  rowEven: {},\n  rowSelected: {},\n  rowHovered: {},\n  cell: {\n    padding: 12,\n    borderRightWidth: 1,\n  },\n  cellText: {\n    fontSize: 14,\n  },\n  numberText: {\n    textAlign: 'right',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  sortIconContainer: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: 28,\n    justifyContent: 'center',\n    width: 16,\n    gap: 2,\n    marginLeft: 8,\n  },\n  sortIcon: {\n    fontSize: 12,\n    width: 12,\n    height: 10,\n    lineHeight: 10,\n    textAlign: 'center',\n  },\n  sortIconUpActive: {\n    fontSize: 13,\n  },\n  sortIconDownActive: {\n    fontSize: 13,\n  },\n  linkButton: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    minWidth: 44,\n    alignItems: 'center',\n    position: 'relative',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n    }),\n  },\n  linkText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  externalLinkIcon: {\n    position: 'absolute',\n    top: 0,\n    right: 2,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n});\n","export const spacing = {\n  SMALL: 8,\n  MEDIUM: 12,\n  LARGE: 16,\n  XLARGE: 24,\n}; ","import React from 'react';\nimport { View, Text, Pressable, StyleSheet, Platform } from 'react-native';\nimport { BaseProduct } from '../types/scraper';\nimport { spacing } from '../constants/spacing';\nimport { colors } from '../theme/colors';\n\ninterface ComparisonControlsProps {\n  selectedFoils: BaseProduct[];\n  onCompareSelected: () => void;\n  onExitCompare: () => void;\n  onClearSelection: () => void;\n  isComparisonView?: boolean;\n}\n\nconst WebWrapper = Platform.select({\n  web: ({ children }: { children: React.ReactNode }) => (\n    <div style={{\n      position: 'fixed',\n      bottom: 64,  // 48px footer height + 16px spacing\n      left: 0,\n      right: 0,\n      zIndex: 2000,\n      pointerEvents: 'none',\n    }}>\n      <div style={{ \n        pointerEvents: 'auto', \n        display: 'flex', \n        justifyContent: 'flex-end', \n        paddingRight: spacing.LARGE,\n        paddingBottom: 0,\n      }}>\n        {children}\n      </div>\n    </div>\n  ),\n  default: ({ children }: { children: React.ReactNode }) => <>{children}</>,\n});\n\nconst ComparisonControls = ({ selectedFoils, onCompareSelected, onExitCompare, onClearSelection, isComparisonView }: ComparisonControlsProps) => {\n  // Only show controls if there are selected foils or we're in comparison view\n  if (selectedFoils.length === 0 && !isComparisonView) {\n    return null;\n  }\n\n  const content = !isComparisonView ? (\n    <View style={styles.comparisonBar}>\n      <View style={styles.buttonGroup}>\n        <Pressable\n          style={[styles.button, styles.clearButton]}\n          onPress={onClearSelection}\n        >\n          <Text style={[styles.buttonText, styles.clearButtonText]}>Clear</Text>\n        </Pressable>\n        <Pressable\n          style={[styles.button, styles.compareButton, selectedFoils.length < 2 && styles.buttonDisabled]}\n          onPress={onCompareSelected}\n          disabled={selectedFoils.length < 2}\n        >\n          <Text style={[styles.buttonText, styles.compareButtonText]}>Compare</Text>\n        </Pressable>\n      </View>\n    </View>\n  ) : (\n    <View style={styles.comparisonBar}>\n      <Pressable\n        style={[styles.button, styles.backButton]}\n        onPress={onExitCompare}\n      >\n        <Text style={[styles.buttonText, styles.backButtonText]}>Back</Text>\n      </Pressable>\n    </View>\n  );\n\n  return Platform.OS === 'web' ? (\n    <WebWrapper>{content}</WebWrapper>\n  ) : (\n    <View style={styles.container}>\n      {content}\n    </View>\n  );\n};\n\nexport default ComparisonControls;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    paddingBottom: 8,\n    backgroundColor: colors.background.secondary,\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n  },\n  comparisonBar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    gap: spacing.MEDIUM,\n    backgroundColor: 'transparent',\n  },\n  buttonGroup: {\n    flexDirection: 'row',\n    gap: spacing.MEDIUM,\n  },\n  button: {\n    paddingHorizontal: spacing.LARGE,\n    paddingVertical: spacing.MEDIUM,\n    borderRadius: 8,\n    ...Platform.select({\n      web: {\n        boxShadow: '0px 2px 4px rgba(0,0,0,0.1)',\n        cursor: 'pointer',\n      },\n      default: {\n        elevation: 2,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n      }\n    })\n  },\n  buttonDisabled: {\n    opacity: 0.5,\n  },\n  clearButton: {\n    backgroundColor: colors.background.primary,\n    borderWidth: 1,\n    borderColor: colors.primary,\n  },\n  compareButton: {\n    backgroundColor: colors.primary,\n  },\n  backButton: {\n    backgroundColor: colors.text.tertiary,\n  },\n  buttonText: {\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  clearButtonText: {\n    color: colors.primary,\n  },\n  compareButtonText: {\n    color: colors.background.primary,\n  },\n  backButtonText: {\n    color: colors.background.primary,\n  }\n}); ","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { FoilsTable } from './FoilsTable';\nimport { BaseProduct } from '../types/scraper';\nimport { SortField } from '../hooks/useSortedFoils';\nimport { useSortedFoils } from '../hooks/useSortedFoils';\n\ninterface ComparisonViewProps {\n  foils: BaseProduct[];\n  onClose?: () => void;\n  onCompare?: () => void;\n  columns: { id: string; label: string; isVisible: boolean; }[];\n}\n\nconst ComparisonView = ({ foils, onClose, onCompare, columns }: ComparisonViewProps) => {\n  const { sortOption, setSortOption, sortedFoils } = useSortedFoils(foils);\n  \n  const handleSort = (field: SortField) => {\n    setSortOption(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleSelect = () => {};\n  const isSelected = () => false;\n\n  // Empty filters for comparison view\n  const filters = {\n    brands: [],\n    series: [],\n    type: []\n  };\n\n  return (\n    <View style={styles.container}>\n      <FoilsTable\n        foils={sortedFoils}\n        onSort={handleSort}\n        onFoilSelect={handleSelect}\n        isSelected={isSelected}\n        sortOption={{\n          field: sortOption.field,\n          ascending: sortOption.direction === 'asc'\n        }}\n        columns={columns}\n        filters={filters}\n      />\n    </View>\n  );\n};\n\nexport default ComparisonView;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  }\n});","import React from 'react';\nimport { View, Text, Pressable, StyleSheet, Platform, useWindowDimensions } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { RootStackNavigationProp } from '../types/navigation';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport default function Footer() {\n  const navigation = useNavigation<RootStackNavigationProp>();\n  const { width } = useWindowDimensions();\n  const { colors } = useTheme();\n  const isMobile = width < 768;\n\n  return (\n    <View style={[\n      styles.container, \n      isMobile && styles.containerMobile,\n      { \n        backgroundColor: colors.background.primary,\n        borderTopColor: colors.border\n      }\n    ]}>\n      <View style={[styles.content, isMobile && styles.contentMobile]}>\n        <View style={[styles.linkGroup, isMobile && styles.linkGroupMobile]}>\n          <Pressable onPress={() => navigation.navigate('Terms')}>\n            <Text style={[styles.link, { color: colors.text.secondary }]}>Terms of Service</Text>\n          </Pressable>\n          <Text style={[styles.separator, { color: colors.text.tertiary }]}>•</Text>\n          <Pressable onPress={() => navigation.navigate('Privacy')}>\n            <Text style={[styles.link, { color: colors.text.secondary }]}>Privacy Policy</Text>\n          </Pressable>\n          <Text style={[styles.separator, { color: colors.text.tertiary }]}>•</Text>\n          <Pressable onPress={() => navigation.navigate('Contact')}>\n            <Text style={[styles.link, { color: colors.text.secondary }]}>Contact Us</Text>\n          </Pressable>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderTopWidth: 1,\n    padding: 16,\n  },\n  containerMobile: {\n    padding: 12,\n  },\n  content: {\n    maxWidth: 1200,\n    marginHorizontal: 'auto',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  contentMobile: {\n    flexDirection: 'column',\n    gap: 8,\n  },\n  linkGroup: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n  },\n  linkGroupMobile: {\n    gap: 8,\n  },\n  link: {\n    fontSize: 14,\n  },\n  separator: {\n    fontSize: 14,\n  },\n}); ","import { Helmet } from 'react-helmet-async';\n\ninterface SEOHeadProps {\n  title: string;\n  description: string;\n  canonicalUrl?: string;\n  imageUrl?: string;\n}\n\nexport const SEOHead: React.FC<SEOHeadProps> = ({\n  title,\n  description,\n  canonicalUrl,\n  imageUrl\n}) => {\n  const siteTitle = 'FoilQuiver';\n  const fullTitle = `${title} | ${siteTitle}`;\n  \n  return (\n    <Helmet>\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      {canonicalUrl && <link rel=\"canonical\" href={canonicalUrl} />}\n      \n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      {imageUrl && <meta property=\"og:image\" content={imageUrl} />}\n      \n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={description} />\n      {imageUrl && <meta name=\"twitter:image\" content={imageUrl} />}\n    </Helmet>\n  );\n}; ","import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Platform, useWindowDimensions } from 'react-native';\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { useFoils } from '../hooks/useFoils';\nimport { useSearchFoils } from '../hooks/useSearchFoils';\nimport { useFilteredFoils } from '../hooks/useFilteredFoils';\nimport { useSortedFoils, SortField, SortOption } from '../hooks/useSortedFoils';\nimport { useComparison } from '../hooks/useComparison';\nimport { FoilsTable } from '../components/FoilsTable';\nimport ComparisonControls from '../components/ComparisonControls';\nimport ComparisonView from '../components/ComparisonView';\nimport Footer from '../components/Footer';\nimport { LoadingIndicator } from '../components/LoadingIndicator';\nimport { SEOHead } from '../components/SEOHead';\nimport { RootStackParamList } from '../types/navigation';\nimport { useTheme } from '../theme/ThemeContext';\nimport { BaseProduct } from '../types/scraper';\nimport { FilterOptions } from '../types/filters';\nimport { CONTAINER_PADDING, MOBILE_BREAKPOINT, Column } from '../constants/layout';\nimport { spacing } from '../constants/spacing';\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Browse'> & {\n  filters: {\n    brands: string[];\n    series: string[];\n    type: string[];\n  };\n  onFilterChange: (type: keyof FilterOptions, value: string) => void;\n  columns: Column[];\n};\n\nexport default function BrowseScreen({ route, navigation, filters, onFilterChange, columns }: Props) {\n  const { width } = useWindowDimensions();\n  const isMobile = width < MOBILE_BREAKPOINT;\n  const { foils, loading, error, refreshFoils } = useFoils();\n  const [isComparisonView, setIsComparisonView] = useState(false);\n  const { filteredFoils, filterOptions } = useFilteredFoils(foils, filters);\n  const { colors } = useTheme();\n\n  const { searchedFoils } = useSearchFoils(filteredFoils, route.params?.searchQuery || '');\n  const { sortOption, setSortOption, sortedFoils } = useSortedFoils(searchedFoils);\n  const { \n    selectedFoils,\n    toggleFoilSelection,\n    isSelected,\n    clearSelection\n  } = useComparison();\n\n  const handleSort = (field: SortField) => {\n    setSortOption(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleCompareSelected = () => {\n    setIsComparisonView(true);\n  };\n\n  const handleExitCompare = () => {\n    setIsComparisonView(false);\n  };\n\n  if (loading) {\n    return <LoadingIndicator />;\n  }\n\n  if (error) {\n    return <Text style={[styles.error, { color: colors.error }]}>{error}</Text>;\n  }\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.background.primary }]}>\n      <SEOHead\n        title=\"FoilQuiver - Browse and compare hydrofoils\"\n        description={`Compare ${foils.length} hydrofoils across ${filterOptions.brands.length} brands. Filter by type, brand, and specifications to find your perfect foil.`}\n        canonicalUrl=\"https://foilquiver.com/browse\"\n      />\n      <View style={[\n        styles.content,\n        !isMobile && styles.contentDesktop\n      ]}>\n        <View style={styles.tableContainer}>\n          {isComparisonView ? (\n            <ComparisonView \n              foils={selectedFoils} \n              onClose={handleExitCompare}\n              onCompare={() => {}}\n              columns={columns}\n            />\n          ) : (\n            <>\n              <FoilsTable\n                foils={sortedFoils}\n                onSort={handleSort}\n                onFoilSelect={toggleFoilSelection}\n                isSelected={isSelected}\n                sortOption={{\n                  field: sortOption.field,\n                  ascending: sortOption.direction === 'asc'\n                }}\n                columns={columns}\n                filters={filters}\n              />\n              <View style={styles.comparisonControlsContainer}>\n                <ComparisonControls\n                  selectedFoils={selectedFoils}\n                  onCompareSelected={handleCompareSelected}\n                  onExitCompare={handleExitCompare}\n                  onClearSelection={clearSelection}\n                  isComparisonView={isComparisonView}\n                />\n              </View>\n            </>\n          )}\n        </View>\n      </View>\n      <Footer />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'flex-start',\n  },\n  contentDesktop: {\n    paddingHorizontal: CONTAINER_PADDING,\n  },\n  tableContainer: {\n    flex: 1,\n    width: '100%',\n    position: 'relative',\n  },\n  comparisonControlsContainer: {\n    position: 'absolute',\n    bottom: spacing.LARGE,\n    right: 0,\n    left: 0,\n    paddingHorizontal: CONTAINER_PADDING,\n  },\n  error: {\n    padding: 16,\n    textAlign: 'center',\n  },\n}); ","import { useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useSearchFoils(foils: BaseProduct[], searchQuery: string) {\n  const searchedFoils = useMemo(() => {\n    if (!searchQuery.trim()) {\n      return foils;\n    }\n\n    const query = searchQuery.toLowerCase().trim();\n    return foils.filter(foil => {\n      const searchableFields = [\n        foil.brand,\n        foil.model,\n        foil.series,\n        foil.specs.area.toString(),\n        foil.specs.wingspan.toString(),\n        foil.specs.aspectRatio.toString(),\n      ];\n\n      return searchableFields.some(field => \n        field.toLowerCase().includes(query)\n      );\n    });\n  }, [foils, searchQuery]);\n\n  return { searchedFoils };\n} ","import { useState, useCallback } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useComparison() {\n  const [selectedFoils, setSelectedFoils] = useState<BaseProduct[]>([]);\n\n  const toggleFoilSelection = useCallback((foil: BaseProduct) => {\n    setSelectedFoils(prev => {\n      const isAlreadySelected = prev.some(f => f.model === foil.model && f.brand === foil.brand);\n      if (isAlreadySelected) {\n        return prev.filter(f => !(f.model === foil.model && f.brand === foil.brand));\n      }\n      return [...prev, foil];\n    });\n  }, []);\n\n  const isSelected = useCallback((foil: BaseProduct) => {\n    return selectedFoils.some(f => f.model === foil.model && f.brand === foil.brand);\n  }, [selectedFoils]);\n\n  const clearSelection = useCallback(() => {\n    setSelectedFoils([]);\n  }, []);\n\n  return {\n    selectedFoils,\n    toggleFoilSelection,\n    isSelected,\n    clearSelection,\n  };\n} "],"names":["useSortedFoils","foils","sortOption","setSortOption","useState","field","direction","sortedFoils","useMemo","products","_toConsumableArray","sort","a","b","valueA","valueB","toLowerCase","price","specs","multiplier","localeCompare","FoilsTable","onSort","onFoilSelect","isSelected","columns","filters","width","useWindowDimensions","isMobile","MOBILE_BREAKPOINT","colors","useTheme","useEffect","async","savedSort","loadSortOption","ascending","error","loadSavedSort","saveSortOption","saveSortSettings","getColumnWidth","columnId","COLUMN_WIDTHS","isColumnFiltered","brands","length","series","type","getCellContent","foil","content","brand","model","area","toFixed","wingspan","aspectRatio","_jsxs","Pressable","style","styles","linkButton","backgroundColor","primary","onPress","window","open","sourceUrl","children","_jsx","Text","linkText","color","text","inverse","externalLinkIcon","cellText","includes","numberText","View","container","background","ScrollView","horizontal","showsHorizontalScrollIndicator","horizontalScrollView","marginHorizontal","CONTAINER_PADDING","paddingHorizontal","tableContent","tableHeader","secondary","headerRow","borderBottomColor","border","map","column","isVisible","headerCell","id","borderRightColor","headerCellFiltered","headerText","label","sortIconContainer","sortIcon","tertiary","sortIconUpActive","sortIconDownActive","scrollView","showsVerticalScrollIndicator","bounces","index","pressed","row","rowEven","rowSelected","Platform","OS","rowHovered","cell","StyleSheet","create","flex","minWidth","borderBottomWidth","flexDirection","Object","assign","alignItems","justifyContent","padding","borderRightWidth","cursor","fontWeight","fontSize","textAlign","height","gap","marginLeft","lineHeight","paddingVertical","borderRadius","position","top","right","WebWrapper","select","web","bottom","left","zIndex","pointerEvents","display","paddingRight","paddingBottom","default","_Fragment","ComparisonControls","selectedFoils","onCompareSelected","onExitCompare","onClearSelection","isComparisonView","comparisonBar","button","backButton","buttonText","backButtonText","buttonGroup","clearButton","clearButtonText","compareButton","buttonDisabled","disabled","compareButtonText","borderTopWidth","borderTopColor","boxShadow","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","opacity","borderWidth","borderColor","ComparisonView","onClose","onCompare","prev","handleSelect","Footer","navigation","useNavigation","containerMobile","contentMobile","linkGroup","linkGroupMobile","navigate","link","separator","maxWidth","SEOHead","_ref","title","description","canonicalUrl","imageUrl","fullTitle","Helmet","name","rel","href","property","BrowseScreen","route","onFilterChange","loading","refreshFoils","useFoils","setIsComparisonView","filteredFoils","filterOptions","useFilteredFoils","searchedFoils","searchQuery","trim","query","filter","toString","some","useSearchFoils","params","toggleFoilSelection","clearSelection","_useState","_useState2","_slicedToArray","setSelectedFoils","useCallback","f","concat","useComparison","handleExitCompare","LoadingIndicator","contentDesktop","tableContainer","comparisonControlsContainer","handleCompareSelected"],"sourceRoot":""}