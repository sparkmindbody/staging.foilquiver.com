{"version":3,"file":"static/js/132.c5b46988.chunk.js","mappings":"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","sources":["src/constants/spacing.ts","src/hooks/useSortedFoils.ts","src/utils/sorting.ts","src/services/productService.ts","src/screens/BrowseScreen.tsx","src/hooks/useFoils.ts","src/hooks/useFilteredFoils.ts","src/hooks/useSearchFoils.ts","src/hooks/useComparison.ts"],"sourcesContent":["export const spacing = {\n  SMALL: 8,\n  MEDIUM: 12,\n  LARGE: 16,\n  XLARGE: 24,\n}; ","import { useState, useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { sortProducts } from '../utils/sorting';\n\nexport type SortField = 'brand' | 'series' | 'model' | 'price' | 'area' | 'wingspan' | 'aspectRatio' | 'cord' | 'type' | 'link';\nexport type SortDirection = 'asc' | 'desc';\n\nexport interface SortOption {\n  field: SortField;\n  direction: SortDirection;\n}\n\nexport function useSortedFoils(foils: BaseProduct[]) {\n  const [sortOption, setSortOption] = useState<SortOption>({\n    field: 'area',\n    direction: 'asc'\n  });\n\n  const sortedFoils = useMemo(() => {\n    return sortProducts(foils, sortOption.field, sortOption.direction);\n  }, [foils, sortOption]);\n\n  return {\n    sortOption,\n    setSortOption,\n    sortedFoils\n  };\n} ","import { BaseProduct } from '../types/scraper';\nimport { SortField, SortDirection } from '../hooks/useSortedFoils';\n\nexport function sortProducts(\n  products: BaseProduct[],\n  field: SortField,\n  direction: SortDirection\n): BaseProduct[] {\n  return [...products].sort((a, b) => {\n    let valueA: string | number;\n    let valueB: string | number;\n\n    if (field === 'brand' || field === 'series' || field === 'model' || field === 'type') {\n      valueA = a[field].toLowerCase();\n      valueB = b[field].toLowerCase();\n    } else if (field === 'price') {\n      valueA = a.price || 0;\n      valueB = b.price || 0;\n    } else if (field in a.specs) {\n      valueA = a.specs[field as keyof typeof a.specs] || 0;\n      valueB = b.specs[field as keyof typeof b.specs] || 0;\n    } else {\n      valueA = '';\n      valueB = '';\n    }\n    \n    const multiplier = direction === 'asc' ? 1 : -1;\n    \n    if (typeof valueA === 'string' && typeof valueB === 'string') {\n      return valueA.localeCompare(valueB) * multiplier;\n    }\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      return (valueA - valueB) * multiplier;\n    }\n    return 0;\n  });\n} ","import { BaseProduct } from '../types/scraper';\nimport { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport class ProductService {\n  private static isWeb = Platform.OS === 'web';\n  private static DATA_PATH = '/data/foils.json';\n  private static CACHE_DIR = '.cache';\n\n  // Get base URL for data loading\n  private static getBaseUrl(): string {\n    if (process.env.NODE_ENV === 'development') {\n      return '';\n    }\n    return process.env.NODE_ENV === 'staging' \n      ? 'https://staging.foilquiver.com'\n      : 'https://foilquiver.com';\n  }\n\n  static async getAllProducts(): Promise<BaseProduct[]> {\n    try {\n      if (this.isWeb) {\n        const baseUrl = this.getBaseUrl();\n\n        // Try loading from data directory first\n        try {\n          const response = await fetch(`${baseUrl}${this.DATA_PATH}`);\n          if (response.ok) {\n            const products = await response.json();\n            console.log(`Loaded ${products.length} products from ${this.DATA_PATH}`);\n            return products;\n          } else {\n            console.warn(`Failed to load from ${this.DATA_PATH} (${response.status}), trying .cache directory...`);\n          }\n        } catch (error) {\n          console.warn(`Failed to load from ${this.DATA_PATH}, trying .cache directory...`, error);\n        }\n\n        // Try loading from .cache as fallback\n        try {\n          // Normalize brand names to match file names\n          const brands = ['armstrong', 'lift-foils', 'axis-foils', 'code-foils', 'kt-foils', 'uni-foil'];\n          const allProducts: BaseProduct[] = [];\n          \n          for (const brand of brands) {\n            try {\n              const response = await fetch(`${baseUrl}/${this.CACHE_DIR}/${brand}.json`);\n              if (response.ok) {\n                const products = await response.json();\n                console.log(`Loaded ${products.length} products for ${brand} from .cache`);\n                allProducts.push(...products);\n              }\n            } catch (error) {\n              console.warn(`No cache file found for ${brand}`);\n            }\n          }\n\n          if (allProducts.length > 0) {\n            return allProducts;\n          }\n        } catch (error) {\n          console.warn('Failed to load from .cache directory', error);\n        }\n      } else {\n        // For mobile, use AsyncStorage\n        const cached = await AsyncStorage.getItem('foils');\n        if (cached) {\n          const products = JSON.parse(cached);\n          console.log(`Loaded ${products.length} products from AsyncStorage`);\n          return products;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading foils data:', error);\n    }\n    \n    console.warn('No foils data found in any location');\n    return [];\n  }\n} ","import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { useFoils } from '../hooks/useFoils';\nimport { useSearchFoils } from '../hooks/useSearchFoils';\nimport { useFilteredFoils } from '../hooks/useFilteredFoils';\nimport { useSortedFoils, SortField, SortOption } from '../hooks/useSortedFoils';\nimport { useComparison } from '../hooks/useComparison';\nimport { FilterControls } from '../components/FilterControls';\nimport { FoilsTable } from '../components/FoilsTable';\nimport ComparisonControls from '../components/ComparisonControls';\nimport ComparisonView from '../components/ComparisonView';\nimport Footer from '../components/Footer';\nimport { LoadingIndicator } from '../components/LoadingIndicator';\nimport { SEOHead } from '../components/SEOHead';\nimport { RootStackParamList } from '../types/navigation';\nimport { colors } from '../theme/colors';\nimport { BaseProduct } from '../types/scraper';\nimport { FilterOptions } from '../types/filters';\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Browse'>;\n\nexport default function BrowseScreen({ route, navigation }: Props) {\n  const { foils, loading, error, refreshFoils } = useFoils();\n  const [isComparisonView, setIsComparisonView] = useState(false);\n  const { \n    filters, \n    setFilters, \n    filteredFoils, \n    filterOptions \n  } = useFilteredFoils(foils);\n\n  const { searchedFoils } = useSearchFoils(filteredFoils, route.params?.searchQuery || '');\n  const { sortOption, setSortOption, sortedFoils } = useSortedFoils(searchedFoils);\n  const { \n    selectedFoils,\n    toggleFoilSelection,\n    isSelected,\n    clearSelection\n  } = useComparison();\n\n  const handleFilterChange = (type: keyof FilterOptions, value: string) => {\n    setFilters(prev => {\n      if (type === 'type') {\n        const typeValue = value as 'front' | 'tail';\n        return { ...prev, type: prev.type === typeValue ? null : typeValue };\n      }\n      const array = prev[type] as string[];\n      return {\n        ...prev,\n        [type]: array.includes(value)\n          ? array.filter(item => item !== value)\n          : [...array, value],\n      };\n    });\n  };\n\n  const handleSort = (field: SortField) => {\n    setSortOption(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleCompareSelected = () => {\n    setIsComparisonView(true);\n  };\n\n  const handleExitCompare = () => {\n    setIsComparisonView(false);\n  };\n\n  if (loading) {\n    return <LoadingIndicator />;\n  }\n\n  if (error) {\n    return <Text style={styles.error}>{error}</Text>;\n  }\n\n  return (\n    <>\n      <SEOHead\n        title=\"FoilQuiver - Browse and compare hydrofoils\"\n        description={`Compare ${foils.length} hydrofoils across ${filterOptions.brands.length} brands. Filter by type, brand, and specifications to find your perfect foil.`}\n        canonicalUrl=\"https://foilquiver.com/browse\"\n      />\n      <View style={[styles.container, styles.containerWeb]}>\n        <FilterControls\n          filterOptions={{\n            brands: filterOptions.brands,\n            series: filterOptions.series,\n            types: ['front', 'tail']\n          }}\n          selectedBrands={filters.brands}\n          selectedSeries={filters.series}\n          selectedTypes={filters.type ? [filters.type] : []}\n          onFilterChange={handleFilterChange}\n        />\n        <View style={[styles.tableContainer, styles.tableContainerWeb]}>\n          {isComparisonView ? (\n            <ComparisonView \n              foils={selectedFoils} \n              onClose={handleExitCompare}\n              onCompare={() => {}}\n            />\n          ) : (\n            <FoilsTable\n              foils={sortedFoils}\n              onSort={handleSort}\n              onFoilSelect={toggleFoilSelection}\n              isSelected={isSelected}\n              sortOption={{\n                field: sortOption.field,\n                ascending: sortOption.direction === 'asc'\n              }}\n            />\n          )}\n        </View>\n        <ComparisonControls\n          selectedFoils={selectedFoils}\n          onCompareSelected={handleCompareSelected}\n          onExitCompare={handleExitCompare}\n          onClearSelection={clearSelection}\n          isComparisonView={isComparisonView}\n        />\n        <Footer />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n  },\n  containerWeb: Platform.OS === 'web' ? {\n    minHeight: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  } as any : {},\n  tableContainer: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n  },\n  tableContainerWeb: Platform.OS === 'web' ? {\n    overflow: 'scroll',\n  } : {},\n  error: {\n    color: 'red',\n    padding: 16,\n    textAlign: 'center',\n  },\n}); ","import { useState, useEffect } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { ProductService } from '../services/productService';\n\nexport function useFoils() {\n  const [foils, setFoils] = useState<BaseProduct[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadFoils = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const products = await ProductService.getAllProducts();\n      setFoils(products);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load foils');\n      console.error('Error loading foils:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadFoils();\n  }, []);\n\n  const refreshFoils = () => {\n    loadFoils();\n  };\n\n  return {\n    foils,\n    loading,\n    error,\n    refreshFoils\n  };\n} ","import { useState, useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { FilterOptions } from '../types/filters';\n\nexport function useFilteredFoils(foils: BaseProduct[]) {\n  const [filters, setFilters] = useState<FilterOptions>({\n    brands: [],\n    series: [],\n    type: null,\n  });\n\n  const filterOptions = useMemo(() => {\n    const brands = Array.from(new Set(foils.map(foil => foil.brand)));\n    const allSeries = Array.from(new Set(foils.map(foil => foil.series)));\n    const types = ['front', 'tail'];\n\n    // Create brandSeries mapping\n    const brandSeries = brands.reduce((acc, brand) => {\n      acc[brand] = Array.from(new Set(\n        foils\n          .filter(foil => foil.brand === brand)\n          .map(foil => foil.series)\n      ));\n      return acc;\n    }, {} as Record<string, string[]>);\n\n    // Filter foils based on selected type\n    const typeFilteredFoils = filters.type \n      ? foils.filter(foil => foil.type === filters.type)\n      : foils;\n\n    // Get series based on type-filtered foils\n    const typeFilteredSeries = Array.from(new Set(typeFilteredFoils.map(foil => foil.series)));\n\n    // Filter series based on selected brands and type\n    const series = filters.brands.length > 0\n      ? Array.from(new Set(\n          typeFilteredFoils\n            .filter(foil => filters.brands.includes(foil.brand))\n            .map(foil => foil.series)\n        ))\n      : typeFilteredSeries;\n\n    return {\n      brands,\n      series,\n      types,\n      brandSeries,\n    };\n  }, [foils, filters.brands, filters.type]);\n\n  const filteredFoils = useMemo(() => {\n    return foils.filter(foil => {\n      const brandMatch = filters.brands.length === 0 || filters.brands.includes(foil.brand);\n      const seriesMatch = filters.series.length === 0 || filters.series.includes(foil.series);\n      const typeMatch = !filters.type || foil.type === filters.type;\n\n      return brandMatch && seriesMatch && typeMatch;\n    });\n  }, [foils, filters]);\n\n  return {\n    filters,\n    setFilters,\n    filteredFoils,\n    filterOptions,\n  };\n} ","import { useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useSearchFoils(foils: BaseProduct[], searchQuery: string) {\n  const searchedFoils = useMemo(() => {\n    if (!searchQuery.trim()) {\n      return foils;\n    }\n\n    const query = searchQuery.toLowerCase().trim();\n    return foils.filter(foil => {\n      const searchableFields = [\n        foil.brand,\n        foil.model,\n        foil.series,\n        foil.specs.area.toString(),\n        foil.specs.wingspan.toString(),\n        foil.specs.aspectRatio.toString(),\n      ];\n\n      return searchableFields.some(field => \n        field.toLowerCase().includes(query)\n      );\n    });\n  }, [foils, searchQuery]);\n\n  return { searchedFoils };\n} ","import { useState, useCallback } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useComparison() {\n  const [selectedFoils, setSelectedFoils] = useState<BaseProduct[]>([]);\n\n  const toggleFoilSelection = useCallback((foil: BaseProduct) => {\n    setSelectedFoils(prev => {\n      const isAlreadySelected = prev.some(f => f.model === foil.model && f.brand === foil.brand);\n      if (isAlreadySelected) {\n        return prev.filter(f => !(f.model === foil.model && f.brand === foil.brand));\n      }\n      return [...prev, foil];\n    });\n  }, []);\n\n  const isSelected = useCallback((foil: BaseProduct) => {\n    return selectedFoils.some(f => f.model === foil.model && f.brand === foil.brand);\n  }, [selectedFoils]);\n\n  const clearSelection = useCallback(() => {\n    setSelectedFoils([]);\n  }, []);\n\n  return {\n    selectedFoils,\n    toggleFoilSelection,\n    isSelected,\n    clearSelection,\n  };\n} "],"names":["spacing","SMALL","MEDIUM","LARGE","XLARGE","useSortedFoils","foils","_useState","useState","field","direction","_useState2","_slicedToArray","sortOption","setSortOption","sortedFoils","useMemo","products","_toConsumableArray","sort","a","b","valueA","valueB","toLowerCase","price","specs","multiplier","localeCompare","ProductService","_createClass","_classCallCheck","key","value","_getAllProducts","_asyncToGenerator","this","isWeb","baseUrl","getBaseUrl","response","fetch","DATA_PATH","ok","json","error","allProducts","brand","CACHE_DIR","push","apply","length","cached","AsyncStorage","getItem","JSON","parse","arguments","Platform","OS","BrowseScreen","_ref","_route$params","route","_useFoils","navigation","setFoils","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setError","loadFoils","getAllProducts","err","Error","message","useEffect","refreshFoils","useFoils","isComparisonView","setIsComparisonView","_useFilteredFoils","brands","series","type","filters","setFilters","filterOptions","Array","from","Set","map","foil","brandSeries","reduce","acc","filter","typeFilteredFoils","typeFilteredSeries","includes","types","filteredFoils","brandMatch","seriesMatch","typeMatch","useFilteredFoils","_useSearchFoils","searchQuery","searchedFoils","trim","query","model","area","toString","wingspan","aspectRatio","some","useSearchFoils","params","_useSortedFoils","_useComparison","selectedFoils","setSelectedFoils","toggleFoilSelection","useCallback","prev","f","concat","isSelected","clearSelection","useComparison","handleExitCompare","_jsx","LoadingIndicator","Text","style","styles","children","_jsxs","_Fragment","SEOHead","title","description","canonicalUrl","View","container","containerWeb","FilterControls","selectedBrands","selectedSeries","selectedTypes","onFilterChange","typeValue","_objectSpread","array","_defineProperty","item","tableContainer","tableContainerWeb","ComparisonView","onClose","onCompare","FoilsTable","onSort","onFoilSelect","ascending","ComparisonControls","onCompareSelected","onExitCompare","onClearSelection","Footer","StyleSheet","create","flex","backgroundColor","colors","background","primary","minHeight","display","flexDirection","overflow","color","padding","textAlign"],"sourceRoot":""}