{"version":3,"file":"static/js/main.47639ecb.js","mappings":"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","sources":["src/components/ErrorBoundary.tsx","src/components/SearchBar.tsx","src/components/TableSettings.tsx","src/navigation/AppNavigator.tsx","index.ts","App.tsx","src/components/LoadingIndicator.tsx","src/constants/layout.ts","src/hooks/useFilteredFoils.ts","src/utils/dataTransform.ts","src/services/productService.ts","src/hooks/useFoils.ts","src/theme/colors.ts"],"sourcesContent":["import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n    error: null\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <View style={styles.container}>\n          <Text style={styles.text}>Something went wrong.</Text>\n          <Text style={styles.errorText}>{this.state.error?.message}</Text>\n        </View>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  text: {\n    fontSize: 16,\n    marginBottom: 10,\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 14,\n  },\n}); ","import React from 'react';\nimport { View, TextInput, Pressable, Text, StyleSheet, Platform } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { colors } from '../theme/colors';\n\ninterface SearchBarProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  onClear: () => void;\n  placeholder?: string;\n}\n\nexport function SearchBar({\n  value,\n  onChangeText,\n  onClear,\n  placeholder = '🔍 Search foils...'\n}: SearchBarProps) {\n  return (\n    <View style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={value}\n        onChangeText={onChangeText}\n        placeholder={placeholder}\n        placeholderTextColor={colors.text.muted}\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n      />\n      {value.length > 0 && (\n        <Pressable\n          style={styles.clearButton}\n          onPress={onClear}\n        >\n          <Text style={styles.clearButtonText}>✕</Text>\n        </Pressable>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: colors.background.secondary,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    borderWidth: 1,\n    borderColor: colors.border,\n    height: '100%',\n    minHeight: 36,\n  },\n  input: {\n    flex: 1,\n    fontSize: 14,\n    color: colors.text.primary,\n    height: '100%',\n    padding: 0,\n  },\n  clearButton: {\n    padding: 4,\n  },\n  clearButtonText: {\n    color: colors.text.muted,\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n}); ","import React, { useState, useMemo } from 'react';\nimport { View, Text, Pressable, StyleSheet, Modal, Platform } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { colors } from '../theme/colors';\nimport { FilterOptions } from '../types/filters';\nimport { BaseProduct } from '../types/scraper';\n\ninterface Column {\n  id: string;\n  label: string;\n  isVisible: boolean;\n}\n\ninterface TableSettingsProps {\n  filterOptions: {\n    brands: string[];\n    series: string[];\n    types: string[];\n  };\n  selectedBrands: string[];\n  selectedSeries: string[];\n  selectedTypes: string[];\n  onFilterChange: (type: keyof FilterOptions, value: string) => void;\n  onClearFilters: () => void;\n  columns: Column[];\n  onColumnVisibilityChange: (columnId: string) => void;\n  onResetColumns: () => void;\n  foils: BaseProduct[];\n}\n\nexport function TableSettings({\n  filterOptions,\n  selectedBrands,\n  selectedSeries,\n  selectedTypes,\n  onFilterChange,\n  onClearFilters,\n  columns,\n  onColumnVisibilityChange,\n  onResetColumns,\n  foils,\n}: TableSettingsProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'filters' | 'columns'>('filters');\n\n  // Filter series based on selected brands\n  const availableSeries = useMemo(() => {\n    if (selectedBrands.length === 0) {\n      return filterOptions.series;\n    }\n\n    // Get all series from foils that match selected brands\n    const seriesSet = new Set<string>();\n    foils.forEach(foil => {\n      if (selectedBrands.includes(foil.brand) && foil.series) {\n        seriesSet.add(foil.series);\n      }\n    });\n\n    return Array.from(seriesSet).sort();\n  }, [filterOptions.series, selectedBrands, foils]);\n\n  return (\n    <>\n      <Pressable \n        onPress={() => setIsOpen(true)}\n        style={styles.iconButton}\n      >\n        <MaterialIcons name=\"settings\" size={24} color={colors.text.primary} />\n      </Pressable>\n\n      <Modal\n        visible={isOpen}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setIsOpen(false)}\n      >\n        <Pressable \n          style={styles.modalOverlay}\n          onPress={() => setIsOpen(false)}\n        >\n          <Pressable \n            style={styles.modalContent}\n            onPress={e => e.stopPropagation()}\n          >\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Table Settings</Text>\n              <Pressable \n                onPress={() => setIsOpen(false)}\n                style={styles.closeButton}\n              >\n                <MaterialIcons name=\"close\" size={24} color={colors.text.secondary} />\n              </Pressable>\n            </View>\n\n            <View style={styles.tabs}>\n              <Pressable\n                style={[styles.tab, activeTab === 'filters' && styles.activeTab]}\n                onPress={() => setActiveTab('filters')}\n              >\n                <Text style={[styles.tabText, activeTab === 'filters' && styles.activeTabText]}>\n                  Filters {(selectedBrands.length > 0 || selectedSeries.length > 0 || selectedTypes.length > 0) && '•'}\n                </Text>\n              </Pressable>\n              <Pressable\n                style={[styles.tab, activeTab === 'columns' && styles.activeTab]}\n                onPress={() => setActiveTab('columns')}\n              >\n                <Text style={[styles.tabText, activeTab === 'columns' && styles.activeTabText]}>\n                  Columns {columns.some(col => !col.isVisible) && '•'}\n                </Text>\n              </Pressable>\n            </View>\n\n            {activeTab === 'filters' ? (\n              <View style={styles.content}>\n                <View style={styles.headerWithAction}>\n                  <Text style={styles.contentTitle}>Active Filters</Text>\n                  {(selectedBrands.length > 0 || selectedSeries.length > 0 || selectedTypes.length > 0) && (\n                    <Pressable \n                      onPress={onClearFilters}\n                      style={styles.clearButton}\n                    >\n                      <Text style={styles.clearButtonText}>Clear All</Text>\n                    </Pressable>\n                  )}\n                </View>\n                <View style={styles.section}>\n                  <Text style={styles.sectionTitle}>Brand</Text>\n                  <View style={styles.chipContainer}>\n                    {filterOptions.brands.map((brand) => (\n                      <Pressable\n                        key={brand}\n                        style={[\n                          styles.chip,\n                          selectedBrands.includes(brand) && styles.chipSelected,\n                        ]}\n                        onPress={() => onFilterChange('brands', brand)}\n                      >\n                        <Text \n                          style={[\n                            styles.chipText,\n                            selectedBrands.includes(brand) && styles.chipTextSelected,\n                          ]}\n                        >\n                          {brand}\n                        </Text>\n                      </Pressable>\n                    ))}\n                  </View>\n                </View>\n\n                <View style={styles.section}>\n                  <Text style={styles.sectionTitle}>Type</Text>\n                  <View style={styles.chipContainer}>\n                    {filterOptions.types.map((type) => (\n                      <Pressable\n                        key={type}\n                        style={[\n                          styles.chip,\n                          selectedTypes.includes(type) && styles.chipSelected,\n                        ]}\n                        onPress={() => onFilterChange('type', type)}\n                      >\n                        <Text \n                          style={[\n                            styles.chipText,\n                            selectedTypes.includes(type) && styles.chipTextSelected,\n                          ]}\n                        >\n                          {type}\n                        </Text>\n                      </Pressable>\n                    ))}\n                  </View>\n                </View>\n\n                <View style={styles.section}>\n                  <Text style={styles.sectionTitle}>Series</Text>\n                  <View style={styles.chipContainer}>\n                    {availableSeries.length > 0 ? (\n                      availableSeries.map((series) => (\n                        <Pressable\n                          key={series}\n                          style={[\n                            styles.chip,\n                            selectedSeries.includes(series) && styles.chipSelected,\n                          ]}\n                          onPress={() => onFilterChange('series', series)}\n                        >\n                          <Text \n                            style={[\n                              styles.chipText,\n                              selectedSeries.includes(series) && styles.chipTextSelected,\n                            ]}\n                          >\n                            {series}\n                          </Text>\n                        </Pressable>\n                      ))\n                    ) : (\n                      <Text style={styles.noSeriesText}>No series available for selected brands</Text>\n                    )}\n                  </View>\n                </View>\n              </View>\n            ) : (\n              <View style={styles.content}>\n                <View style={styles.headerWithAction}>\n                  <Text style={styles.contentTitle}>Visible Columns</Text>\n                  {columns.some(col => !col.isVisible) && (\n                    <Pressable \n                      onPress={onResetColumns}\n                      style={styles.clearButton}\n                    >\n                      <Text style={styles.clearButtonText}>Reset</Text>\n                    </Pressable>\n                  )}\n                </View>\n                <View style={styles.columnList}>\n                  {columns.map(column => (\n                    <Pressable\n                      key={column.id}\n                      style={styles.columnItem}\n                      onPress={() => onColumnVisibilityChange(column.id)}\n                    >\n                      <Text style={styles.columnLabel}>{column.label}</Text>\n                      <View style={[styles.checkbox, column.isVisible && styles.checkboxChecked]}>\n                        {column.isVisible && (\n                          <MaterialIcons name=\"check\" size={16} color={colors.background.primary} />\n                        )}\n                      </View>\n                    </Pressable>\n                  ))}\n                </View>\n              </View>\n            )}\n          </Pressable>\n        </Pressable>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 8,\n    backgroundColor: colors.background.secondary,\n    alignItems: 'center',\n    justifyContent: 'center',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      transition: 'all 0.2s ease',\n      ':hover': {\n        backgroundColor: colors.primary,\n      },\n    }),\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: colors.background.primary,\n    borderRadius: 8,\n    width: '90%',\n    maxWidth: 480,\n    maxHeight: '90%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: colors.text.primary,\n  },\n  closeButton: {\n    padding: 4,\n  },\n  tabs: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  tab: {\n    flex: 1,\n    padding: 12,\n    alignItems: 'center',\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: colors.primary,\n  },\n  tabText: {\n    color: colors.text.secondary,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  activeTabText: {\n    color: colors.primary,\n  },\n  content: {\n    padding: 16,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: colors.text.primary,\n    marginBottom: 12,\n  },\n  chipContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  chip: {\n    backgroundColor: colors.background.secondary,\n    borderRadius: 16,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n  },\n  chipSelected: {\n    backgroundColor: colors.primary,\n  },\n  chipText: {\n    color: colors.text.secondary,\n    fontSize: 14,\n  },\n  chipTextSelected: {\n    color: colors.background.primary,\n  },\n  columnList: {\n    gap: 12,\n  },\n  columnItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  columnLabel: {\n    fontSize: 14,\n    color: colors.text.primary,\n  },\n  checkbox: {\n    width: 20,\n    height: 20,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkboxChecked: {\n    backgroundColor: colors.primary,\n    borderColor: colors.primary,\n  },\n  headerWithAction: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  contentTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text.primary,\n  },\n  clearButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    backgroundColor: colors.background.secondary,\n  },\n  clearButtonText: {\n    color: colors.text.secondary,\n    fontSize: 14,\n  },\n  noSeriesText: {\n    color: colors.text.secondary,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n}); ","import React, { lazy, Suspense, useState } from 'react';\nimport { View, Text, StyleSheet, Pressable, Platform, useWindowDimensions } from 'react-native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useNavigation } from '@react-navigation/native';\nimport { RootStackParamList, RootStackNavigationProp } from '../types/navigation';\nimport { SearchBar } from '../components/SearchBar';\nimport { LoadingIndicator } from '../components/LoadingIndicator';\nimport { TableSettings } from '../components/TableSettings';\nimport { colors } from '../theme/colors';\nimport { useFoils } from '../hooks/useFoils';\nimport { useFilteredFoils } from '../hooks/useFilteredFoils';\nimport { FilterOptions } from '../types/filters';\nimport { CONTAINER_PADDING, MOBILE_BREAKPOINT, DEFAULT_COLUMNS, getTableWidth, getContentWidth, Column } from '../constants/layout';\n\n// Lazy load screens\nconst BrowseScreen = lazy(() => import('../screens/BrowseScreen'));\nconst PrivacyPolicy = lazy(() => import('../screens/legal/PrivacyPolicy'));\nconst TermsOfService = lazy(() => import('../screens/legal/TermsOfService'));\nconst Contact = lazy(() => import('../screens/legal/Contact'));\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\ninterface AppNavigatorProps {\n  searchQuery: string;\n  onSearch: (text: string) => void;\n}\n\nconst COLUMN_WIDTHS = {\n  brand: 100,\n  series: 120,\n  model: 150,\n  area: 80,\n  wingspan: 80,\n  aspectRatio: 80,\n  type: 80,\n  price: 105,\n  link: 80,\n} as const;\n\nexport const AppNavigator = ({ searchQuery, onSearch }: AppNavigatorProps) => {\n  const navigation = useNavigation<RootStackNavigationProp>();\n  const { foils } = useFoils();\n  const [columns, setColumns] = useState<Column[]>(DEFAULT_COLUMNS);\n  const [filters, setFilters] = useState<FilterOptions>({\n    brands: [],\n    series: [],\n    type: []\n  });\n  const { filterOptions } = useFilteredFoils(foils, filters);\n  const { width } = useWindowDimensions();\n  const isMobile = width < MOBILE_BREAKPOINT;\n\n  const handleLogoPress = () => {\n    navigation.reset({\n      index: 0,\n      routes: [{ name: 'Browse', params: { searchQuery } }],\n    });\n  };\n\n  const handleFilterChange = (type: keyof FilterOptions, value: string) => {\n    setFilters(prev => {\n      const newFilters = { ...prev };\n      if (type === 'type') {\n        const array = prev.type as string[];\n        newFilters.type = array.includes(value)\n          ? array.filter(item => item !== value)\n          : [...array, value];\n      } else {\n        const array = prev[type] as string[];\n        newFilters[type] = array.includes(value)\n          ? array.filter(item => item !== value)\n          : [...array, value];\n      }\n      return newFilters;\n    });\n  };\n\n  const handleColumnVisibilityChange = (columnId: string) => {\n    setColumns(prev => prev.map(col => \n      col.id === columnId ? { ...col, isVisible: !col.isVisible } : col\n    ));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      brands: [],\n      series: [],\n      type: []\n    });\n  };\n\n  const handleResetColumns = () => {\n    setColumns(DEFAULT_COLUMNS);\n  };\n\n  // Calculate table width based on visible columns\n  const tableWidth = React.useMemo(() => getTableWidth(columns), [columns]);\n\n  const contentWidth = React.useMemo(() => \n    getContentWidth(tableWidth, width, isMobile), \n    [tableWidth, width, isMobile]\n  );\n\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: colors.background.primary,\n        },\n        headerShadowVisible: false,\n      }}\n    >\n      <Stack.Screen \n        name=\"Browse\"\n        options={{\n          headerTitle: '',\n          headerLeft: () => (\n            <View style={[\n              styles.headerOuterContainer,\n              !isMobile && { alignItems: 'center' }\n            ]}>\n              {isMobile ? (\n                // Mobile Layout\n                <View style={styles.headerMainContainerMobile}>\n                  <Pressable \n                    onPress={handleLogoPress}\n                    style={({ pressed }) => [\n                      styles.logoContainer,\n                      pressed && styles.logoPressed\n                    ]}\n                  >\n                    <Text style={styles.headerTitle}>FoilQuiver</Text>\n                  </Pressable>\n                </View>\n              ) : (\n                // Web Layout\n                <View style={[\n                  styles.headerMainContainerWeb,\n                  { width: contentWidth }\n                ]}>\n                  <View style={styles.headerContentWeb}>\n                    <Pressable \n                      onPress={handleLogoPress}\n                      style={({ pressed }) => [\n                        styles.logoContainer,\n                        pressed && styles.logoPressed\n                      ]}\n                    >\n                      <Text style={styles.headerTitle}>FoilQuiver</Text>\n                    </Pressable>\n                    <View style={styles.searchBarContainerWeb}>\n                      <SearchBar \n                        value={searchQuery}\n                        onChangeText={onSearch}\n                        onClear={() => onSearch('')}\n                      />\n                    </View>\n                    <TableSettings\n                      filterOptions={filterOptions}\n                      selectedBrands={filters.brands}\n                      selectedSeries={filters.series}\n                      selectedTypes={filters.type}\n                      onFilterChange={handleFilterChange}\n                      onClearFilters={handleClearFilters}\n                      columns={columns}\n                      onColumnVisibilityChange={handleColumnVisibilityChange}\n                      onResetColumns={handleResetColumns}\n                      foils={foils}\n                    />\n                  </View>\n                </View>\n              )}\n            </View>\n          ),\n          headerRight: () => isMobile ? (\n            <View style={styles.headerRightContainerMobile}>\n              <View style={styles.searchBarContainerMobile}>\n                <SearchBar \n                  value={searchQuery}\n                  onChangeText={onSearch}\n                  onClear={() => onSearch('')}\n                />\n              </View>\n              <TableSettings\n                filterOptions={filterOptions}\n                selectedBrands={filters.brands}\n                selectedSeries={filters.series}\n                selectedTypes={filters.type}\n                onFilterChange={handleFilterChange}\n                onClearFilters={handleClearFilters}\n                columns={columns}\n                onColumnVisibilityChange={handleColumnVisibilityChange}\n                onResetColumns={handleResetColumns}\n                foils={foils}\n              />\n            </View>\n          ) : null,\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <BrowseScreen \n              {...props} \n              filters={filters}\n              onFilterChange={handleFilterChange}\n              columns={columns}\n            />\n          </Suspense>\n        )}\n      </Stack.Screen>\n      <Stack.Screen \n        name=\"Terms\"\n        options={{\n          title: 'Terms of Service',\n          headerStyle: {\n            backgroundColor: '#f4f4f4',\n          },\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <TermsOfService {...props} />\n          </Suspense>\n        )}\n      </Stack.Screen>\n      <Stack.Screen \n        name=\"Privacy\"\n        options={{\n          title: 'Privacy Policy',\n          headerStyle: {\n            backgroundColor: '#f4f4f4',\n          },\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <PrivacyPolicy {...props} />\n          </Suspense>\n        )}\n      </Stack.Screen>\n      <Stack.Screen \n        name=\"Contact\"\n        options={{\n          title: 'Contact Us',\n          headerStyle: {\n            backgroundColor: '#f4f4f4',\n          },\n        }}\n      >\n        {(props) => (\n          <Suspense fallback={<LoadingIndicator />}>\n            <Contact {...props} />\n          </Suspense>\n        )}\n      </Stack.Screen>\n    </Stack.Navigator>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerOuterContainer: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n    paddingHorizontal: CONTAINER_PADDING,\n  },\n  // Mobile Styles\n  headerMainContainerMobile: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: 56,\n    width: '100%',\n  },\n  headerRightContainerMobile: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    paddingRight: 12,\n  },\n  searchBarContainerMobile: {\n    width: 160,\n    height: 36,\n  },\n  // Web Styles\n  headerMainContainerWeb: {\n    height: 72,\n    width: '100%',\n  },\n  headerContentWeb: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 24,\n    height: '100%',\n    width: '100%',\n  },\n  searchBarContainerWeb: {\n    flex: 1,\n    height: 40,\n  },\n  // Common Styles\n  logoContainer: {\n    height: '100%',\n    justifyContent: 'center',\n    minWidth: 120,\n  },\n  logoPressed: {\n    opacity: 0.7,\n  },\n  headerTitle: {\n    color: colors.primary,\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n}); ","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import React, { useState, useRef } from 'react';\nimport { NavigationContainer, NavigationContainerRef, LinkingOptions } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { RootStackParamList } from './src/types/navigation';\nimport { ErrorBoundary } from './src/components/ErrorBoundary';\nimport { AppNavigator } from './src/navigation/AppNavigator';\nimport { LoadingIndicator } from './src/components/LoadingIndicator';\nimport { routes } from './src/utils/routes';\n\nexport default function App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const navigationRef = useRef<NavigationContainerRef<RootStackParamList>>(null);\n\n  const linking: LinkingOptions<RootStackParamList> = {\n    prefixes: ['https://foilquiver.com', 'http://localhost:19006'],\n    config: {\n      screens: {\n        browse: '',\n        terms: 'terms',\n        privacy: 'privacy',\n        contact: 'contact',\n        comparison: 'comparison',\n        brand: 'brand/:brandName',\n        foil: 'foil/:brandName/:modelName',\n      },\n    },\n    getInitialURL() {\n      const url = new URL(window.location.href);\n      const searchQuery = url.searchParams.get('searchQuery') || '';\n      return `/?searchQuery=${searchQuery}`;\n    },\n  };\n\n  const handleSearch = (text: string) => {\n    setSearchQuery(text);\n    if (navigationRef.current) {\n      navigationRef.current.setParams({ searchQuery: text });\n    }\n  };\n\n  return (\n    <HelmetProvider>\n      <ErrorBoundary>\n        <SafeAreaProvider>\n          <NavigationContainer \n            ref={navigationRef}\n            linking={linking}\n            fallback={<LoadingIndicator />}\n          >\n            <AppNavigator \n              searchQuery={searchQuery}\n              onSearch={handleSearch}\n            />\n          </NavigationContainer>\n        </SafeAreaProvider>\n      </ErrorBoundary>\n    </HelmetProvider>\n  );\n} ","import React from 'react';\nimport { ActivityIndicator, View, StyleSheet } from 'react-native';\n\nexport function LoadingIndicator() {\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}); ","// Layout constants\nexport const CONTAINER_PADDING = 24;\nexport const MAX_CONTENT_WIDTH = 1200;\nexport const MOBILE_BREAKPOINT = 768;\n\n// Column width constants\nexport const COLUMN_WIDTHS = {\n  brand: 100,\n  series: 120,\n  model: 150,\n  area: 80,\n  wingspan: 80,\n  aspectRatio: 80,\n  type: 80,\n  price: 105,\n  link: 80,\n} as const;\n\nexport type Column = {\n  id: keyof typeof COLUMN_WIDTHS;\n  label: string;\n  isVisible: boolean;\n};\n\n// Default column configuration\nexport const DEFAULT_COLUMNS: Column[] = [\n  { id: 'brand', label: 'Brand', isVisible: true },\n  { id: 'series', label: 'Series', isVisible: false },\n  { id: 'model', label: 'Model', isVisible: true },\n  { id: 'area', label: 'Area', isVisible: true },\n  { id: 'wingspan', label: 'Span', isVisible: true },\n  { id: 'aspectRatio', label: 'AR', isVisible: true },\n  { id: 'type', label: 'Type', isVisible: true },\n  { id: 'price', label: 'Price', isVisible: true },\n  { id: 'link', label: 'Link', isVisible: true },\n];\n\n// Helper functions for width calculations\nexport const getTableWidth = (columns: Column[]) => {\n  return columns.reduce((total, column) => {\n    if (column.isVisible) {\n      return total + (COLUMN_WIDTHS[column.id] || 100);\n    }\n    return total;\n  }, 0);\n};\n\nexport const getContentWidth = (tableWidth: number, screenWidth: number, isMobile: boolean) => {\n  if (isMobile) {\n    return screenWidth;\n  }\n  return Math.min(tableWidth, screenWidth - 48);\n}; ","import { useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { FilterOptions } from '../types/filters';\nimport { groupFoilsByBrand, groupFoilsBySeries } from '../utils/dataTransform';\n\nexport function useFilteredFoils(foils: BaseProduct[], filters: FilterOptions) {\n  const filterOptions = useMemo(() => {\n    const brands = Array.from(new Set(foils.map(foil => foil.brand))).sort();\n    \n    // Group foils by brand\n    const foilsByBrand = groupFoilsByBrand(foils);\n    \n    // Get series based on selected brands\n    let availableSeries: string[] = [];\n    if (filters.brands.length === 0) {\n      // If no brands selected, show all series\n      availableSeries = Array.from(new Set(foils.map(foil => foil.series))).sort();\n    } else {\n      // If brands are selected, only show series from those brands\n      const filteredFoils = filters.brands.flatMap(brand => foilsByBrand[brand] || []);\n      availableSeries = Array.from(new Set(filteredFoils.map(foil => foil.series))).sort();\n    }\n\n    const types = ['front', 'tail'];\n\n    return { brands, series: availableSeries, types };\n  }, [foils, filters.brands]);\n\n  const filteredFoils = useMemo(() => {\n    return foils.filter(foil => {\n      const brandMatch = filters.brands.length === 0 || filters.brands.includes(foil.brand);\n      const seriesMatch = filters.series.length === 0 || filters.series.includes(foil.series);\n      const typeMatch = filters.type.length === 0 || filters.type.includes(foil.type);\n\n      return brandMatch && seriesMatch && typeMatch;\n    });\n  }, [foils, filters.brands, filters.series, filters.type]);\n\n  return {\n    filteredFoils,\n    filterOptions,\n  };\n} ","import { BaseProduct } from '../types/scraper';\n\nexport function formatMeasurement(value: number, unit: string): string {\n  return `${value}${unit}`;\n}\n\nexport function convertArea(cmSquared: number): number {\n  return Math.round(cmSquared * 0.155); // Convert to square inches\n}\n\nexport function calculateAspectRatio(wingspan: number, area: number): number {\n  return Math.round((wingspan * wingspan / area) * 100) / 100;\n}\n\nexport function groupFoilsByBrand(foils: BaseProduct[]): Record<string, BaseProduct[]> {\n  return foils.reduce((acc, foil) => {\n    if (!acc[foil.brand]) {\n      acc[foil.brand] = [];\n    }\n    acc[foil.brand].push(foil);\n    return acc;\n  }, {} as Record<string, BaseProduct[]>);\n}\n\nexport function groupFoilsBySeries(foils: BaseProduct[]): Record<string, BaseProduct[]> {\n  return foils.reduce((acc, foil) => {\n    if (!acc[foil.series]) {\n      acc[foil.series] = [];\n    }\n    acc[foil.series].push(foil);\n    return acc;\n  }, {} as Record<string, BaseProduct[]>);\n}\n\nexport function getUniqueValues(foils: BaseProduct[], key: keyof BaseProduct): string[] {\n  return Array.from(new Set(foils.map(foil => foil[key] as string))).sort();\n} ","import { BaseProduct } from '../types/scraper';\nimport { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport class ProductService {\n  private static isWeb = Platform.OS === 'web';\n  private static DATA_PATH = '/data/foils.json';\n  private static CACHE_DIR = '.cache';\n\n  // Get base URL for data loading\n  private static getBaseUrl(): string {\n    if (process.env.NODE_ENV === 'development') {\n      return '';\n    }\n    return process.env.NODE_ENV === 'staging' \n      ? 'https://staging.foilquiver.com'\n      : 'https://foilquiver.com';\n  }\n\n  static async getAllProducts(): Promise<BaseProduct[]> {\n    try {\n      if (this.isWeb) {\n        const baseUrl = this.getBaseUrl();\n\n        // Try loading from data directory first\n        try {\n          const response = await fetch(`${baseUrl}${this.DATA_PATH}`);\n          if (response.ok) {\n            const products = await response.json();\n            console.log(`Loaded ${products.length} products from ${this.DATA_PATH}`);\n            return products;\n          } else {\n            console.warn(`Failed to load from ${this.DATA_PATH} (${response.status}), trying .cache directory...`);\n          }\n        } catch (error) {\n          console.warn(`Failed to load from ${this.DATA_PATH}, trying .cache directory...`, error);\n        }\n\n        // Try loading from .cache as fallback\n        try {\n          // Normalize brand names to match file names\n          const brands = ['armstrong', 'lift-foils', 'axis-foils', 'code-foils', 'kt-foils', 'uni-foil'];\n          const allProducts: BaseProduct[] = [];\n          \n          for (const brand of brands) {\n            try {\n              const response = await fetch(`${baseUrl}/${this.CACHE_DIR}/${brand}.json`);\n              if (response.ok) {\n                const products = await response.json();\n                console.log(`Loaded ${products.length} products for ${brand} from .cache`);\n                allProducts.push(...products);\n              }\n            } catch (error) {\n              console.warn(`No cache file found for ${brand}`);\n            }\n          }\n\n          if (allProducts.length > 0) {\n            return allProducts;\n          }\n        } catch (error) {\n          console.warn('Failed to load from .cache directory', error);\n        }\n      } else {\n        // For mobile, use AsyncStorage\n        const cached = await AsyncStorage.getItem('foils');\n        if (cached) {\n          const products = JSON.parse(cached);\n          console.log(`Loaded ${products.length} products from AsyncStorage`);\n          return products;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading foils data:', error);\n    }\n    \n    console.warn('No foils data found in any location');\n    return [];\n  }\n} ","import { useState, useEffect } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { ProductService } from '../services/productService';\n\nexport function useFoils() {\n  const [foils, setFoils] = useState<BaseProduct[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadFoils = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const products = await ProductService.getAllProducts();\n      setFoils(products);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load foils');\n      console.error('Error loading foils:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadFoils();\n  }, []);\n\n  const refreshFoils = () => {\n    loadFoils();\n  };\n\n  return {\n    foils,\n    loading,\n    error,\n    refreshFoils\n  };\n} ","export const colors = {\n  primary: '#BF3475',    // Main blue for primary actions, links\n  secondary: '#1F214D',  // Orange for accents, highlights\n  link: '#0066cc',       // Alternative link color\n  background: {\n    primary: '#FFFFFF',  // Main background\n    secondary: '#F5F7FA', // Secondary background (e.g., cards, hover states)\n    hover: '#f8f9fa',    // Hover state background\n    selected: '#e6f3ff'  // Selected state background\n  },\n  text: {\n    primary: '#1A1A1A',\n    secondary: '#4A4A4A',\n    muted: '#757575'\n  },\n  border: 'rgba(0, 0, 0, .1)',\n  palette: {\n    deepBlue: '#00659D',    // Deep ocean blue\n    teal: '#00ABBC',        // Vibrant teal\n    sand: '#E2C58A',        // Warm beige/sand\n    coral: '#FC8890',       // Soft coral pink\n    raspberry: '#B35D7F'    // Muted raspberry\n  },\n  palette2: {\n    midnight: '#1F214D',    // Deep navy/midnight blue\n    purple: '#50366F',      // Rich purple\n    magenta: '#BF3475',     // Vibrant magenta\n    coral: '#EE6C45',       // Warm coral orange\n    gold: '#FFCE61'         // Bright yellow gold\n  }\n} as const; \n\n"],"names":["ErrorBoundary","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","concat","state","hasError","error","_inherits","_createClass","key","value","errorInfo","_this$state$error","this","_jsxs","View","style","styles","container","children","_jsx","Text","text","errorText","message","props","Component","StyleSheet","create","flex","justifyContent","alignItems","padding","fontSize","marginBottom","color","SearchBar","onChangeText","onClear","placeholder","TextInput","input","placeholderTextColor","colors","muted","autoCapitalize","autoCorrect","Pressable","clearButton","onPress","clearButtonText","flexDirection","backgroundColor","background","secondary","borderRadius","paddingHorizontal","borderWidth","borderColor","border","height","minHeight","primary","fontWeight","TableSettings","filterOptions","selectedBrands","selectedSeries","selectedTypes","onFilterChange","onClearFilters","columns","onColumnVisibilityChange","onResetColumns","foils","isOpen","setIsOpen","useState","activeTab","setActiveTab","availableSeries","useMemo","series","seriesSet","Set","forEach","foil","includes","brand","add","from","sort","_Fragment","iconButton","MaterialIcons","name","size","Modal","visible","transparent","animationType","onRequestClose","modalOverlay","modalContent","e","stopPropagation","modalHeader","modalTitle","closeButton","tabs","tab","tabText","activeTabText","some","col","isVisible","content","headerWithAction","contentTitle","section","sectionTitle","chipContainer","brands","map","chip","chipSelected","chipText","chipTextSelected","types","type","noSeriesText","columnList","column","columnItem","id","columnLabel","label","checkbox","checkboxChecked","Object","assign","width","Platform","OS","cursor","transition","maxWidth","maxHeight","borderBottomWidth","borderBottomColor","flexWrap","gap","paddingVertical","BrowseScreen","lazy","PrivacyPolicy","TermsOfService","Contact","Stack","createNativeStackNavigator","AppNavigator","searchQuery","onSearch","navigation","useNavigation","useFoils","setColumns","DEFAULT_COLUMNS","filters","setFilters","useFilteredFoils","useWindowDimensions","isMobile","MOBILE_BREAKPOINT","handleLogoPress","reset","index","routes","params","handleFilterChange","prev","newFilters","array","filter","item","handleColumnVisibilityChange","columnId","handleClearFilters","handleResetColumns","tableWidth","React","getTableWidth","contentWidth","getContentWidth","Navigator","screenOptions","headerStyle","headerShadowVisible","Screen","options","headerTitle","headerLeft","headerOuterContainer","headerMainContainerMobile","pressed","logoContainer","logoPressed","headerMainContainerWeb","headerContentWeb","searchBarContainerWeb","headerRight","headerRightContainerMobile","searchBarContainerMobile","Suspense","fallback","LoadingIndicator","title","CONTAINER_PADDING","paddingRight","minWidth","opacity","registerRootComponent","_useState","_useState2","_slicedToArray","setSearchQuery","navigationRef","useRef","linking","prefixes","config","screens","browse","terms","privacy","contact","comparison","getInitialURL","URL","window","location","href","searchParams","get","HelmetProvider","SafeAreaProvider","NavigationContainer","ref","current","setParams","ActivityIndicator","COLUMN_WIDTHS","model","area","wingspan","aspectRatio","price","link","reduce","total","screenWidth","Math","min","foilsByBrand","acc","push","groupFoilsByBrand","filteredFoils","flatMap","brandMatch","seriesMatch","typeMatch","ProductService","_getAllProducts","_asyncToGenerator","isWeb","baseUrl","getBaseUrl","response","fetch","DATA_PATH","ok","json","allProducts","CACHE_DIR","products","apply","_toConsumableArray","cached","AsyncStorage","getItem","JSON","parse","setFoils","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setError","loadFoils","_ref","getAllProducts","err","Error","useEffect","refreshFoils","hover","selected","palette","deepBlue","teal","sand","coral","raspberry","palette2","midnight","purple","magenta","gold"],"sourceRoot":""}