{"version":3,"file":"static/js/lib-~-index.esm.js.141b7da9.chunk.js","mappings":"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","sources":["node_modules/react-window/src/timer.js","node_modules/react-window/src/domHelpers.js","node_modules/react-window/src/createGridComponent.js","node_modules/react-window/src/VariableSizeGrid.js","node_modules/react-window/src/createListComponent.js","node_modules/react-window/src/VariableSizeList.js","node_modules/react-window/src/FixedSizeGrid.js","node_modules/react-window/src/FixedSizeList.js","node_modules/react-window/src/shallowDiffers.js","node_modules/react-window/src/areEqual.js","node_modules/react-window/src/shouldComponentUpdate.js"],"sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"names":["now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","call","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","defaultItemKey","columnIndex","data","rowIndex","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","this","scrollToItem","align","columnCount","rowCount","scrollbarSize","estimatedTotalHeight","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","estimatedTotalWidth","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","shouldComponentUpdate","nextState"],"sourceRoot":""}