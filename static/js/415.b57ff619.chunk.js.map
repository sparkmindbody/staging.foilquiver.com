{"version":3,"file":"static/js/415.b57ff619.chunk.js","mappings":"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","sources":["src/components/Footer.tsx","src/components/AppLayout.tsx","src/components/ComparisonControls.tsx","src/components/FoilCollectionView.tsx","src/components/FoilsTable.tsx","src/components/SEOHead.tsx","src/components/Toast.tsx","src/hooks/useSearchFoils.ts","src/hooks/useSortedFoils.ts","src/utils/sorting.ts","src/components/ComparisonView.tsx","src/screens/ComparisonScreen.tsx"],"sourcesContent":["import React from 'react';\nimport { View, Text, Pressable, StyleSheet, Platform, useWindowDimensions } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { RootStackNavigationProp } from '../types/navigation';\nimport { useTheme } from '../theme/ThemeContext';\nimport { spacing } from '../theme/spacing';\n\nexport default function Footer() {\n  const navigation = useNavigation<RootStackNavigationProp>();\n  const { width } = useWindowDimensions();\n  const { colors } = useTheme();\n  const isMobile = width < 768;\n\n  return (\n    <View style={[\n      styles.container, \n      isMobile && styles.containerMobile,\n      { \n        backgroundColor: colors.background.primary,\n        borderTopColor: colors.border\n      }\n    ]}>\n      <View style={[styles.content, isMobile && styles.contentMobile]}>\n        <View style={[styles.linksContainer, isMobile && styles.linksContainerMobile]}>\n          <View style={[styles.linkGroup, isMobile && styles.linkGroupMobile]}>\n            <Pressable onPress={() => navigation.navigate('Terms')}>\n              <Text style={[styles.link, { color: colors.text.secondary }]}>Terms of Service</Text>\n            </Pressable>\n            <Text style={[styles.separator, { color: colors.text.tertiary }]}>•</Text>\n            <Pressable onPress={() => navigation.navigate('Privacy')}>\n              <Text style={[styles.link, { color: colors.text.secondary }]}>Privacy Policy</Text>\n            </Pressable>\n            <Text style={[styles.separator, { color: colors.text.tertiary }]}>•</Text>\n            <Pressable onPress={() => navigation.navigate('Contact')}>\n              <Text style={[styles.link, { color: colors.text.secondary }]}>Contact Us</Text>\n            </Pressable>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    padding: spacing.LARGE,\n  },\n  containerMobile: {\n    padding: 0,\n  },\n  content: {\n    padding: 0,\n    borderTopWidth: 1,\n    maxWidth: 1200,\n    marginHorizontal: 'auto',\n  },\n  contentMobile: {\n    flexDirection: 'column',\n    gap: 8,\n  },\n  linksContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  linksContainerMobile: {\n    flexDirection: 'column',\n    gap: spacing.SMALL,\n  },\n  linkGroup: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: spacing.LARGE,\n  },\n  linkGroupMobile: {\n    gap: 8,\n  },\n  link: {\n    fontSize: 14,\n  },\n  separator: {\n    fontSize: 14,\n  },\n}); ","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Footer from './Footer';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n  showFooter?: boolean;\n}\n\nexport const AppLayout: React.FC<AppLayoutProps> = ({ \n  children, \n  showFooter = true,\n}) => {\n  const { colors } = useTheme();\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.background.primary }]}>\n      <View style={styles.content}>\n        {children}\n      </View>\n      {showFooter && <Footer />}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: 1,\n    width: '100%',\n  },\n}); ","import React from 'react';\nimport { View, Text, Pressable, StyleSheet, Platform, TouchableOpacity } from 'react-native';\nimport { BaseProduct } from '../types/scraper';\nimport { spacing } from '../theme/spacing';\nimport { colors } from '../theme/colors';\nimport { useTheme } from '../theme/ThemeContext';\nimport { useNavigation } from '@react-navigation/native';\nimport { Button } from './Button';\n\ninterface ComparisonControlsProps {\n  selectedFoils: BaseProduct[];\n  onCompareSelected: () => void;\n  onExitCompare: () => void;\n  onClearSelection: () => void;\n  isComparisonView?: boolean;\n  isQuiverView?: boolean;\n}\n\nconst ComparisonControls = ({ \n  selectedFoils, \n  onCompareSelected, \n  onExitCompare, \n  onClearSelection, \n  isComparisonView = false,\n  isQuiverView = false\n}: ComparisonControlsProps) => {\n  const { colors } = useTheme();\n  const navigation = useNavigation();\n\n  // Only show controls if there are selected foils or we're in comparison view\n  if (selectedFoils.length === 0 && !isComparisonView) {\n    return null;\n  }\n\n  const handleCompare = () => {\n    if (selectedFoils.length === 0) return;\n    \n    // Navigate to the dedicated comparison screen\n    navigation.navigate('Comparison', {\n      foils: selectedFoils,\n    });\n  };\n\n  return !isComparisonView ? (\n    <View style={styles.comparisonBar}>\n      <View style={styles.buttonGroup}>\n        <Pressable\n          style={[styles.button, styles.clearButton]}\n          onPress={onClearSelection}\n        >\n          <Text style={[styles.buttonText, styles.clearButtonText]}>Clear</Text>\n        </Pressable>\n        <Pressable\n          style={[styles.button, styles.compareButton, selectedFoils.length < 2 && styles.buttonDisabled]}\n          onPress={handleCompare}\n          disabled={selectedFoils.length < 2}\n        >\n          <Text style={[styles.buttonText, styles.compareButtonText]}>Compare</Text>\n        </Pressable>\n      </View>\n    </View>\n  ) : (\n    <View style={styles.comparisonBar}>\n      <TouchableOpacity\n        style={[styles.button, { backgroundColor: colors.background.secondary }]}\n        onPress={onExitCompare}\n      >\n        <Text style={[styles.buttonText, { color: colors.text.primary }]}>\n          {isQuiverView ? 'Close Quiver' : 'Back'}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default ComparisonControls;\n\nconst styles = StyleSheet.create({\n  comparisonBar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    gap: spacing.MEDIUM,\n    backgroundColor: 'transparent',\n  },\n  buttonGroup: {\n    flexDirection: 'row',\n    gap: spacing.MEDIUM,\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: spacing.MEDIUM,\n    paddingVertical: spacing.SMALL,\n    borderRadius: 8,\n    gap: 6,\n    minHeight: 32,\n    minWidth: 90,\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      pointerEvents: 'auto',\n      userSelect: 'none',\n      boxShadow: '0px 2px 4px rgba(0,0,0,0.1)',\n    }),\n  },\n  buttonDisabled: {\n    opacity: 0.5,\n  },\n  clearButton: {\n    backgroundColor: colors.background.primary,\n    borderWidth: 1,\n    borderColor: colors.primary,\n  },\n  compareButton: {\n    backgroundColor: colors.primary,\n  },\n  buttonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n    ...(Platform.OS === 'web' && {\n      userSelect: 'none',\n    }),\n  },\n  clearButtonText: {\n    color: colors.primary,\n  },\n  compareButtonText: {\n    color: colors.background.primary,\n  },\n}); ","import React, { useState, useCallback } from 'react';\nimport { View, StyleSheet, Alert, Platform } from 'react-native';\nimport { FoilsTable } from './FoilsTable';\nimport { Toast } from './Toast';\nimport { useTheme } from '../theme/ThemeContext';\nimport { spacing } from '../theme/spacing';\nimport { BaseProduct, FilterOptions } from '../types/scraper';\nimport { Column } from '../constants/layout';\nimport { useSearchFoils } from '../hooks/useSearchFoils';\nimport { useRoute } from '@react-navigation/native';\nimport { RootStackParamList } from '../types/navigation';\nimport { useSortedFoils } from '../hooks/useSortedFoils';\nimport { SortField } from '../types/scraper';\nimport { useFilteredFoils } from '../hooks/useFilteredFoils';\n\ninterface FoilCollectionViewProps {\n  foils: BaseProduct[];\n  allFoils: BaseProduct[];\n  columns: Column[];\n  searchQuery: string;\n  onSearch?: (query: string) => void;\n  onUpdateFoils?: (foils: BaseProduct[]) => void;\n  renderHeader?: () => React.ReactNode;\n  renderControls?: () => React.ReactNode;\n  onColumnVisibilityChange?: (columnId: string) => void;\n  onResetColumns?: () => void;\n  filterOptions?: {\n    brands: string[];\n    series: string[];\n    types: ('front' | 'tail')[];\n  };\n  selectedFilters?: FilterOptions;\n  onFilterChange?: (type: keyof FilterOptions, value: string) => void;\n  onClearFilters?: () => void;\n}\n\nexport const FoilCollectionView: React.FC<FoilCollectionViewProps> = ({\n  foils,\n  allFoils,\n  columns,\n  searchQuery,\n  onSearch,\n  onUpdateFoils,\n  renderHeader,\n  renderControls,\n  onColumnVisibilityChange,\n  onResetColumns,\n  filterOptions,\n  selectedFilters,\n  onFilterChange,\n  onClearFilters,\n}) => {\n  const { colors } = useTheme();\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const route = useRoute<{ key: string; name: keyof RootStackParamList }>();\n  const isComparisonView = route.name === 'Comparison';\n  const isQuiverView = route.name === 'Quiver';\n\n  // For Comparison and Quiver views, derive filter options from current foils\n  const currentViewFilterOptions = React.useMemo(() => {\n    if (isComparisonView || isQuiverView) {\n      return {\n        brands: Array.from(new Set(foils.map(f => f.brand))),\n        series: Array.from(new Set(foils.map(f => f.series).filter((s): s is string => !!s))),\n        types: Array.from(new Set(foils.map(f => f.type).filter((t): t is 'front' | 'tail' => t === 'front' || t === 'tail')))\n      };\n    }\n    return filterOptions;\n  }, [isComparisonView, isQuiverView, foils, filterOptions]);\n\n  // Apply filters to the appropriate set of foils\n  const { filteredFoils } = useFilteredFoils(\n    isComparisonView || isQuiverView ? foils : allFoils,\n    selectedFilters || { brands: [], series: [], type: [] }\n  );\n\n  // Then apply search to filtered foils\n  const { searchedFoils } = useSearchFoils(\n    isComparisonView || isQuiverView ? allFoils : filteredFoils,\n    searchQuery\n  );\n\n  // Combine current foils with search results, marking search results as temporary\n  const displayFoils = React.useMemo(() => {\n    if (isComparisonView || isQuiverView) {\n      if (searchQuery) {\n        // When searching in comparison/quiver view, show filtered current foils plus search results\n        const currentFilteredFoils = filteredFoils;\n        const newSearchResults = searchedFoils.filter(searchFoil => \n          !foils.some(existingFoil => \n            existingFoil.model === searchFoil.model && \n            existingFoil.brand === searchFoil.brand\n          )\n        );\n        return [...currentFilteredFoils, ...newSearchResults];\n      }\n      // Without search, just show filtered foils\n      return filteredFoils;\n    }\n\n    // In browse view, show current foils plus search results\n    if (searchQuery) {\n      const newSearchResults = searchedFoils.filter(searchFoil => \n        !foils.some(existingFoil => \n          existingFoil.model === searchFoil.model && \n          existingFoil.brand === searchFoil.brand\n        )\n      );\n      return [...foils, ...newSearchResults];\n    }\n\n    return foils;\n  }, [foils, filteredFoils, searchedFoils, searchQuery, isComparisonView, isQuiverView]);\n\n  // Add sorting state\n  const { sortOption, setSortOption, sortedFoils } = useSortedFoils(displayFoils);\n\n  const handleSort = (field: SortField) => {\n    setSortOption(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const removeFoil = useCallback((foil: BaseProduct) => {\n    const updatedFoils = foils.filter(f => \n      !(f.model === foil.model && f.brand === foil.brand)\n    );\n    onUpdateFoils?.(updatedFoils);\n    setToastMessage(`Removed ${foil.model} from your comparison`);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 2000);\n  }, [foils, onUpdateFoils]);\n\n  const handleFoilSelect = useCallback((foil: BaseProduct) => {\n    const isExisting = foils.some(f => \n      f.model === foil.model && \n      f.brand === foil.brand\n    );\n\n    if (isExisting && isComparisonView) {\n      // Show confirmation dialog for removing foils in comparison view\n      if (Platform.OS === 'web') {\n        const confirmed = window.confirm(`Are you sure you want to remove ${foil.model} from your comparison?`);\n        if (confirmed) {\n          removeFoil(foil);\n        }\n      } else {\n        Alert.alert(\n          'Remove Foil',\n          `Are you sure you want to remove ${foil.model} from your comparison?`,\n          [\n            {\n              text: 'Cancel',\n              style: 'cancel'\n            },\n            {\n              text: 'Remove',\n              style: 'destructive',\n              onPress: () => removeFoil(foil)\n            }\n          ]\n        );\n      }\n    } else {\n      // Add new foil or remove in non-comparison view\n      if (isExisting) {\n        const updatedFoils = foils.filter(f => \n          !(f.model === foil.model && f.brand === foil.brand)\n        );\n        onUpdateFoils?.(updatedFoils);\n        setToastMessage(`Removed ${foil.model} from your collection`);\n      } else {\n        onUpdateFoils?.([...foils, foil]);\n        setToastMessage(`Added ${foil.model} to your collection`);\n      }\n      setShowToast(true);\n      setTimeout(() => setShowToast(false), 2000);\n    }\n  }, [foils, onUpdateFoils, isComparisonView, removeFoil]);\n\n  const isSelected = useCallback((foil: BaseProduct) => {\n    if (isComparisonView) {\n      // In comparison view with search, highlight foils that are NOT in the current selection\n      if (searchQuery) {\n        return !foils.some(f => \n          f.model === foil.model && \n          f.brand === foil.brand\n        );\n      }\n      // Without search, no highlighting\n      return false;\n    }\n    return false;\n  }, [foils, isComparisonView, searchQuery]);\n\n  const isTemporary = useCallback((foil: BaseProduct) => {\n    return !foils.some(f => \n      f.model === foil.model && \n      f.brand === foil.brand\n    );\n  }, [foils]);\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.background.primary }]}>\n      {renderHeader?.()}\n      \n      <View style={styles.content}>\n        <FoilsTable\n          foils={sortedFoils}\n          columns={columns}\n          sortOption={{\n            field: sortOption.field,\n            ascending: sortOption.direction === 'asc'\n          }}\n          onSort={handleSort}\n          onFoilSelect={handleFoilSelect}\n          isSelected={isSelected}\n          isTemporary={isTemporary}\n          filters={selectedFilters || { brands: [], series: [], type: [] }}\n          filterOptions={currentViewFilterOptions}\n        />\n      </View>\n\n      {renderControls?.()}\n\n      {showToast && (\n        <Toast message={toastMessage} type=\"success\" />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    ...(Platform.OS === 'web' ? {\n      maxWidth: '100%',\n      width: '100%',\n      overflow: 'hidden',\n    } : {\n      padding: 0,\n    }),\n  },\n  content: {\n    flex: 1,\n    ...(Platform.OS === 'web' ? {\n      padding: 0,\n    } : {}),\n  },\n}); ","/**\n * FoilsTable Component\n * \n * IMPORTANT: Column Alignment\n * - The table uses fixed column widths for consistent layout and horizontal scrolling\n * - Each column width in headerCell must match the corresponding cell width\n * - Current widths:\n *   - Regular columns (brand, model, type, series): 150px\n *   - Number columns (area, wingspan, AR, price): 100px\n *   - Link column: 100px\n * - When modifying column styles, always update both headerCell and cell styles to maintain alignment\n * - Table has a minWidth of 1200px to ensure proper layout on all screen sizes\n */\n\nimport React, { useEffect } from 'react';\nimport { View, Text, Pressable, ScrollView, StyleSheet, Platform, useWindowDimensions } from 'react-native';\nimport { BaseProduct, SortField } from '../types/scraper';\nimport { useTheme } from '../theme/ThemeContext';\nimport { CONTAINER_PADDING, MOBILE_BREAKPOINT, COLUMN_WIDTHS, getTableWidth, getContentWidth, Column } from '../constants/layout';\nimport { saveSortOption, loadSortOption } from '../utils/storage';\nimport { trackAction, ANALYTICS_EVENTS } from '../utils/analytics';\nimport { spacing } from '../theme/spacing';\n\ninterface FilterOptions {\n  brands: string[];\n  series: string[];\n  type: string[];\n}\n\ninterface FoilsTableProps {\n  foils: BaseProduct[];\n  onSort: (field: SortField) => void;\n  onFoilSelect: (foil: BaseProduct) => void;\n  isSelected: (foil: BaseProduct) => boolean;\n  isTemporary?: (foil: BaseProduct) => boolean;\n  sortOption: { field: SortField; ascending: boolean };\n  columns: Column[];\n  filters: FilterOptions;\n  filterOptions?: {\n    brands: string[];\n    series: string[];\n    types: string[];\n  };\n  selectedFoils?: BaseProduct[];\n  onCompare?: () => void;\n  onClearSelection?: () => void;\n}\n\nconst DEFAULT_COLUMNS = [\n  { id: 'brand', label: 'Brand', isVisible: true },\n  { id: 'series', label: 'Series', isVisible: false },\n  { id: 'model', label: 'Model', isVisible: true },\n  { id: 'area', label: 'Area', isVisible: true },\n  { id: 'wingspan', label: 'Span', isVisible: true },\n  { id: 'aspectRatio', label: 'AR', isVisible: true },\n  { id: 'type', label: 'Type', isVisible: true },\n  { id: 'price', label: 'Price', isVisible: true },\n  { id: 'link', label: 'Link', isVisible: true },\n];\n\nexport const FoilsTable: React.FC<FoilsTableProps> = ({\n  foils,\n  onSort,\n  onFoilSelect,\n  isSelected,\n  isTemporary,\n  sortOption,\n  columns,\n  filters,\n  filterOptions,\n  selectedFoils,\n  onCompare,\n  onClearSelection,\n}) => {\n  const { width } = useWindowDimensions();\n  const isMobile = width < MOBILE_BREAKPOINT;\n  const { colors } = useTheme();\n\n  // Load saved sort option on mount\n  useEffect(() => {\n    const loadSavedSort = async () => {\n      try {\n        const savedSort = await loadSortOption();\n        if (savedSort && (savedSort.field !== sortOption.field || savedSort.ascending !== sortOption.ascending)) {\n          onSort(savedSort.field);\n        }\n      } catch (error) {\n        console.error('Error loading sort option:', error);\n      }\n    };\n\n    loadSavedSort();\n  }, []);\n\n  // Save sort option when it changes\n  useEffect(() => {\n    const saveSortSettings = async () => {\n      try {\n        await saveSortOption({\n          field: sortOption.field,\n          ascending: sortOption.ascending\n        });\n      } catch (error) {\n        console.error('Error saving sort option:', error);\n      }\n    };\n\n    saveSortSettings();\n  }, [sortOption]);\n\n  const getColumnWidth = (columnId: string) => {\n    return COLUMN_WIDTHS[columnId as keyof typeof COLUMN_WIDTHS] || 150;\n  };\n\n  const isColumnFiltered = (columnId: string) => {\n    switch (columnId) {\n      case 'brand':\n        return filters.brands.length > 0;\n      case 'series':\n        return filters.series.length > 0;\n      case 'type':\n        return filters.type.length > 0;\n      default:\n        return false;\n    }\n  };\n\n  const renderSortIcon = (columnId: string) => {\n    if (sortOption.field !== columnId) {\n      return (\n        <View style={styles.sortIconContainer}>\n          <Text style={[styles.sortIcon, { color: colors.text.tertiary }]}>▲</Text>\n          <Text style={[styles.sortIcon, { color: colors.text.tertiary }]}>▼</Text>\n        </View>\n      );\n    }\n\n    return (\n      <View style={styles.sortIconContainer}>\n        <Text style={[\n          styles.sortIcon,\n          sortOption.ascending && [styles.sortIconUpActive, { color: colors.primary }]\n        ]}>▲</Text>\n        <Text style={[\n          styles.sortIcon,\n          !sortOption.ascending && [styles.sortIconDownActive, { color: colors.primary }]\n        ]}>▼</Text>\n      </View>\n    );\n  };\n\n  const getCellContent = (foil: BaseProduct, columnId: string) => {\n    let content: React.ReactNode = '-';\n    \n    switch (columnId) {\n      case 'brand':\n        content = foil.brand;\n        break;\n      case 'model':\n        content = foil.model;\n        break;\n      case 'series':\n        content = foil.series || '-';\n        break;\n      case 'area':\n        content = foil.specs?.area?.toFixed(2) || '-';\n        break;\n      case 'wingspan':\n        content = foil.specs?.wingspan?.toFixed(2) || '-';\n        break;\n      case 'aspectRatio':\n        content = foil.specs?.aspectRatio?.toFixed(2) || '-';\n        break;\n      case 'type':\n        content = foil.type || '-';\n        break;\n      case 'price':\n        content = foil.price ? `$${foil.price}` : '-';\n        break;\n      case 'link':\n        return (\n          <Pressable\n            style={[styles.linkButton, { backgroundColor: colors.primary }]}\n            onPress={() => window.open(foil.sourceUrl, '_blank')}\n          >\n            <Text style={[styles.linkText, { color: colors.text.inverse }]}>View</Text>\n            <Text style={[styles.externalLinkIcon, { color: colors.text.inverse }]}>↗</Text>\n          </Pressable>\n        );\n    }\n\n    return (\n      <Text \n        style={[\n          styles.cellText,\n          { color: colors.text.primary },\n          ['area', 'wingspan', 'aspectRatio', 'price'].includes(columnId) && styles.numberText\n        ]}\n      >\n        {content}\n      </Text>\n    );\n  };\n\n  const handleSort = (field: SortField) => {\n    trackAction(ANALYTICS_EVENTS.SORT_FOILS, {\n      field,\n      direction: sortOption.field === field && sortOption.ascending ? 'desc' : 'asc'\n    });\n    onSort(field);\n  };\n\n  const tableWidth = getTableWidth(columns);\n\n  return (\n    <View style={styles.container}>\n      <ScrollView \n        horizontal\n        showsHorizontalScrollIndicator={true}\n        style={styles.horizontalScrollView}\n        contentContainerStyle={{\n          width: tableWidth,\n          flexGrow: 0,\n          margin: 0,\n          padding: 0,\n        }}\n      >\n        <View style={[\n          styles.tableContent,\n          { width: tableWidth }\n        ]}>\n          <View style={[\n            styles.tableHeader,\n            { backgroundColor: colors.background.tertiary }\n          ]}>\n            <View style={[\n              styles.headerRow,\n              { \n                borderBottomColor: colors.border,\n                backgroundColor: colors.background.secondary,\n              }\n            ]}>\n              {columns.map(column => column.isVisible && (\n                <Pressable\n                  key={column.id}\n                  style={[\n                    styles.headerCell,\n                    { \n                      width: getColumnWidth(column.id),\n                      borderRightColor: colors.text.tertiary + '40',\n                      borderBottomColor: isColumnFiltered(column.id) ? colors.primary : colors.border,\n                      backgroundColor: colors.background.tertiary,\n                      borderRightWidth: 1,\n                    },\n                    isColumnFiltered(column.id) && styles.headerCellFiltered\n                  ]}\n                  onPress={() => handleSort(column.id as SortField)}\n                >\n                  <Text style={[\n                    styles.headerText,\n                    { \n                      color: isColumnFiltered(column.id) ? colors.primary : colors.text.primary,\n                      fontWeight: '600',\n                    }\n                  ]}>\n                    {column.label}\n                  </Text>\n                  {renderSortIcon(column.id)}\n                </Pressable>\n              ))}\n            </View>\n          </View>\n          <ScrollView \n            style={[styles.scrollView, { backgroundColor: colors.background.primary }]}\n            showsVerticalScrollIndicator={true}\n            bounces={false}\n          >\n            {foils.map((foil, index) => {\n              const selected = isSelected(foil);\n              const temporary = isTemporary?.(foil);\n              const rowKey = `${foil.model}-${foil.specs?.area || 'unknown'}-${index}`;\n              \n              return (\n                <Pressable\n                  key={rowKey}\n                  onPress={() => onFoilSelect(foil)}\n                  style={({ pressed }) => [\n                    styles.row,\n                    { borderBottomColor: colors.border },\n                    index % 2 === 0 && [styles.rowEven, { backgroundColor: colors.background.secondary + '50' }],\n                    selected && [styles.rowSelected, { \n                      backgroundColor: `${colors.primary}15`,\n                    }],\n                    temporary && [styles.rowTemporary, {\n                      backgroundColor: `${colors.success}10`,\n                    }],\n                    Platform.OS === 'web' && pressed && !selected && [styles.rowHovered, { \n                      backgroundColor: `${colors.primary}10`,\n                    }]\n                  ]}\n                >\n                  {columns.map(column => column.isVisible && (\n                    <View\n                      key={`${rowKey}-${column.id}`}\n                      style={[\n                        styles.cell,\n                        { \n                          width: getColumnWidth(column.id),\n                          borderRightColor: colors.border,\n                          borderRightWidth: 1,\n                        }\n                      ]}\n                    >\n                      {getCellContent(foil, column.id)}\n                    </View>\n                  ))}\n                </Pressable>\n              );\n            })}\n          </ScrollView>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    overflow: 'hidden',\n  },\n  horizontalScrollView: {\n    flex: 1,\n    width: '100%',\n  },\n  tableContent: {\n    flex: 1,\n    width: '100%',\n  },\n  tableHeader: {\n    borderBottomWidth: 1,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 1,\n    elevation: 2,\n  },\n  headerRow: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    width: '100%',\n    minWidth: 'fit-content',\n    flexShrink: 0,\n  },\n  headerCell: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: spacing.MEDIUM,\n    borderRightWidth: 1,\n    borderBottomWidth: 1,\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      transition: 'all 0.2s ease',\n    }),\n  },\n  headerCellFiltered: {\n    borderBottomWidth: 2,\n  },\n  headerText: {\n    fontSize: 14,\n    flex: 1,\n    letterSpacing: 0.3,\n  },\n  row: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    width: '100%',\n    minWidth: 'fit-content',\n    flexShrink: 0,\n    ...(Platform.OS === 'web' && {\n      margin: 0,\n      padding: 0,\n    }),\n  },\n  rowEven: {},\n  rowSelected: {\n    borderStyle: 'solid',\n  },\n  rowHovered: {\n    borderStyle: 'solid',\n  },\n  cell: {\n    padding: spacing.MEDIUM,\n    borderRightWidth: 1,\n  },\n  cellText: {\n    fontSize: 14,\n  },\n  numberText: {\n    textAlign: 'right',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  sortIconContainer: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: 28,\n    justifyContent: 'center',\n    width: 16,\n    gap: spacing.XSMALL,\n    marginLeft: spacing.SMALL,\n  },\n  sortIcon: {\n    fontSize: 12,\n    width: 12,\n    height: 10,\n    lineHeight: 10,\n    textAlign: 'center',\n  },\n  sortIconUpActive: {\n    fontSize: 13,\n  },\n  sortIconDownActive: {\n    fontSize: 13,\n  },\n  linkButton: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    minWidth: 44,\n    alignItems: 'center',\n    position: 'relative',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n    }),\n  },\n  linkText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  externalLinkIcon: {\n    position: 'absolute',\n    top: 0,\n    right: 2,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  rowTemporary: {\n    borderStyle: 'dashed',\n  },\n});\n","import { Helmet } from 'react-helmet-async';\n\ninterface SEOHeadProps {\n  title: string;\n  description: string;\n  canonicalUrl?: string;\n  imageUrl?: string;\n}\n\nexport const SEOHead: React.FC<SEOHeadProps> = ({\n  title,\n  description,\n  canonicalUrl,\n  imageUrl\n}) => {\n  const siteTitle = 'FoilQuiver';\n  const fullTitle = `${title} | ${siteTitle}`;\n  \n  return (\n    <Helmet>\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      {canonicalUrl && <link rel=\"canonical\" href={canonicalUrl} />}\n      \n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      {imageUrl && <meta property=\"og:image\" content={imageUrl} />}\n      \n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={description} />\n      {imageUrl && <meta name=\"twitter:image\" content={imageUrl} />}\n    </Helmet>\n  );\n}; ","import React, { useEffect, useRef } from 'react';\nimport { View, Text, StyleSheet, Animated, Platform } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\nimport { spacing } from '../theme/spacing';\n\ninterface ToastProps {\n  message: string;\n  type?: 'success' | 'error' | 'info';\n  duration?: number;\n}\n\nexport const Toast: React.FC<ToastProps> = ({\n  message,\n  type = 'success',\n  duration = 2000,\n}) => {\n  const { colors } = useTheme();\n  const opacity = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    // Fade in\n    Animated.sequence([\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200,\n        useNativeDriver: true,\n      }),\n      // Hold\n      Animated.delay(duration - 400),\n      // Fade out\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: true,\n      }),\n    ]).start();\n  }, [duration, opacity]);\n\n  const getBackgroundColor = () => {\n    switch (type) {\n      case 'success':\n        return colors.success;\n      case 'error':\n        return colors.error;\n      case 'info':\n        return colors.primary;\n      default:\n        return colors.primary;\n    }\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        {\n          backgroundColor: getBackgroundColor(),\n          opacity,\n        },\n      ]}\n    >\n      <Text style={[styles.message, { color: colors.text.inverse }]}>\n        {message}\n      </Text>\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: spacing.LARGE,\n    left: '50%',\n    transform: [{ translateX: -150 }],\n    minWidth: 300,\n    maxWidth: 400,\n    padding: spacing.MEDIUM,\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n    elevation: 4,\n    zIndex: 1000,\n    ...(Platform.OS === 'web' && {\n      cursor: 'default',\n      userSelect: 'none',\n    }),\n  },\n  message: {\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n}); ","import { useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useSearchFoils(foils: BaseProduct[], searchQuery: string) {\n  const searchedFoils = useMemo(() => {\n    if (!searchQuery.trim()) {\n      return foils;\n    }\n\n    const query = searchQuery.toLowerCase().trim();\n    return foils.filter(foil => {\n      const searchableText = [\n        foil.brand,\n        foil.model,\n        foil.series || '',\n        foil.type || '',\n        foil.specs?.area?.toString() || '',\n        foil.specs?.wingspan?.toString() || '',\n        foil.specs?.aspectRatio?.toString() || '',\n      ].join(' ').toLowerCase();\n\n      return searchableText.includes(query);\n    });\n  }, [foils, searchQuery]);\n\n  return { searchedFoils };\n} ","import { useState, useMemo } from 'react';\nimport { BaseProduct, SortField } from '../types/scraper';\nimport { sortProducts } from '../utils/sorting';\n\nexport interface SortOption {\n  field: SortField;\n  direction: 'asc' | 'desc';\n}\n\nexport function useSortedFoils(foils: BaseProduct[]) {\n  const [sortOption, setSortOption] = useState<SortOption>({\n    field: 'area',\n    direction: 'desc'\n  });\n\n  const sortedFoils = useMemo(() => {\n    return sortProducts(foils, sortOption.field, sortOption.direction);\n  }, [foils, sortOption]);\n\n  return {\n    sortOption,\n    setSortOption,\n    sortedFoils\n  };\n} ","import { BaseProduct } from '../types/scraper';\nimport { SortField, SortDirection } from '../hooks/useSortedFoils';\n\nexport function sortProducts(\n  products: BaseProduct[],\n  field: SortField,\n  direction: SortDirection\n): BaseProduct[] {\n  return [...products].sort((a, b) => {\n    let valueA: string | number;\n    let valueB: string | number;\n\n    if (field === 'brand' || field === 'series' || field === 'model' || field === 'type') {\n      valueA = a[field].toLowerCase();\n      valueB = b[field].toLowerCase();\n    } else if (field === 'price') {\n      valueA = a.price || 0;\n      valueB = b.price || 0;\n    } else if (field in a.specs) {\n      valueA = a.specs[field as keyof typeof a.specs] || 0;\n      valueB = b.specs[field as keyof typeof b.specs] || 0;\n    } else {\n      valueA = '';\n      valueB = '';\n    }\n    \n    const multiplier = direction === 'asc' ? 1 : -1;\n    \n    if (typeof valueA === 'string' && typeof valueB === 'string') {\n      return valueA.localeCompare(valueB) * multiplier;\n    }\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      return (valueA - valueB) * multiplier;\n    }\n    return 0;\n  });\n} ","import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Platform, TouchableOpacity, Text } from 'react-native';\nimport { FoilCollectionView } from './FoilCollectionView';\nimport ComparisonControls from './ComparisonControls';\nimport { QuiverManager } from './QuiverManager';\nimport { BaseProduct } from '../types/scraper';\nimport { Column } from '../constants/layout';\nimport { useTheme } from '../theme/ThemeContext';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { RootStackParamList } from '../types/navigation';\nimport { trackAction, ANALYTICS_EVENTS } from '../utils/analytics';\nimport { spacing } from '../theme/spacing';\nimport { FilterOptions } from '../types/filters';\nimport { generateFoilId } from '../utils/foilUtils';\nimport { useApp } from '../context/AppContext';\n\ninterface ComparisonViewProps {\n  foils: BaseProduct[];\n  allFoils: BaseProduct[];\n  columns: Column[];\n  onClose?: () => void;\n  quiverName?: string;\n  onUpdateQuiver?: (foils: BaseProduct[]) => void;\n  searchQuery?: string;\n  onSearch?: (text: string) => void;\n  onColumnVisibilityChange: (columnId: string) => void;\n  onResetColumns: () => void;\n  filterOptions: {\n    brands: string[];\n    series: string[];\n    types: string[];\n  };\n}\n\nconst ComparisonView: React.FC<ComparisonViewProps> = ({ \n  foils: initialFoils, \n  allFoils, \n  onClose, \n  columns,\n  quiverName,\n  onUpdateQuiver,\n  searchQuery = '',\n  onSearch,\n  onColumnVisibilityChange,\n  onResetColumns,\n  filterOptions,\n}: ComparisonViewProps) => {\n  const { colors } = useTheme();\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string; name: keyof RootStackParamList; params: RootStackParamList['Browse'] }>();\n  const isQuiverView = route.params?.isQuiverView;\n  const [isQuiverManagerVisible, setIsQuiverManagerVisible] = useState(false);\n  const [foils, setFoils] = useState<BaseProduct[]>(initialFoils);\n  const { filters, setFilters, selectedFoils, setSelectedFoils } = useApp();\n\n  // Reset filters when component mounts or unmounts\n  useEffect(() => {\n    setFilters({ brands: [], series: [], type: [] });\n    return () => {\n      // Reset filters and selected foils when component unmounts\n      setFilters({ brands: [], series: [], type: [] });\n      setSelectedFoils([]);\n    };\n  }, [setFilters, setSelectedFoils]);\n\n  // Update foils when initialFoils changes (e.g., when navigating between quivers)\n  useEffect(() => {\n    setFoils(initialFoils);\n  }, [initialFoils]);\n\n  // Sync with selected foils when in quiver view\n  useEffect(() => {\n    if (isQuiverView && selectedFoils.length > 0) {\n      setFoils(selectedFoils);\n    }\n  }, [isQuiverView, selectedFoils]);\n\n  const handleFilterChange = (type: keyof FilterOptions, value: string) => {\n    if (type === 'type' && value !== 'front' && value !== 'tail') {\n      return; // Only allow 'front' and 'tail' for type filter\n    }\n    setFilters(prev => ({\n      ...prev,\n      [type]: prev[type].includes(value)\n        ? prev[type].filter(item => item !== value)\n        : [...prev[type], value]\n    }));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({ brands: [], series: [], type: [] });\n  };\n\n  const handleUpdateFoils = (updatedFoils: BaseProduct[]) => {\n    setFoils(updatedFoils);\n    if (isQuiverView) {\n      setSelectedFoils(updatedFoils); // Update selected foils in app context\n      onUpdateQuiver?.(updatedFoils);\n      trackAction(ANALYTICS_EVENTS.UPDATE_QUIVER, {\n        quiverName,\n        foilCount: updatedFoils.length\n      });\n    }\n  };\n\n  const handleQuiverSaved = (quiverId: string, quiverName: string) => {\n    setIsQuiverManagerVisible(false);\n    navigation.navigate('Quiver', {\n      quiverId,\n      quiverName,\n      foil_ids: foils.map(f => generateFoilId(f))\n    });\n  };\n\n  const renderControls = () => (\n    <View style={styles.controlsContainer}>\n      <View style={styles.controlsInnerContainer}>\n        <View style={styles.controlsColumn}>\n          {!isQuiverView && (\n            <TouchableOpacity\n              style={[styles.button, { backgroundColor: colors.primary }]}\n              onPress={() => setIsQuiverManagerVisible(true)}\n            >\n              <Text style={[styles.buttonText, { color: colors.text.inverse }]}>\n                Save\n              </Text>\n            </TouchableOpacity>\n          )}\n          <ComparisonControls\n            selectedFoils={foils}\n            onCompareSelected={() => {}}\n            onExitCompare={onClose || (() => {})}\n            onClearSelection={() => {}}\n            isComparisonView={true}\n            isQuiverView={isQuiverView}\n          />\n        </View>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <FoilCollectionView\n        foils={foils}\n        allFoils={allFoils}\n        columns={columns}\n        searchQuery={searchQuery}\n        onSearch={onSearch}\n        onUpdateFoils={handleUpdateFoils}\n        renderControls={renderControls}\n        filterOptions={{\n          brands: Array.from(new Set(foils.map(f => f.brand))),\n          series: Array.from(new Set(foils.map(f => f.series).filter((s): s is string => !!s))),\n          types: Array.from(new Set(foils.map(f => f.type).filter((t): t is 'front' | 'tail' => t === 'front' || t === 'tail')))\n        }}\n        selectedFilters={filters}\n        onFilterChange={handleFilterChange}\n        onClearFilters={handleClearFilters}\n      />\n\n      <QuiverManager \n        selectedFoils={foils} \n        onClose={() => setIsQuiverManagerVisible(false)}\n        initialTab={isQuiverView ? 'saved' : 'save'}\n        isModalVisible={isQuiverManagerVisible}\n        hideStandaloneButton={true}\n        onQuiverSaved={handleQuiverSaved}\n      />\n    </View>\n  );\n};\n\nexport default ComparisonView;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: 'relative',\n  },\n  controlsContainer: {\n    position: 'absolute',\n    bottom: spacing.CONTROLS_CONTAINER_BOTTOM,\n    right: 0,\n    left: 0,\n    paddingHorizontal: spacing.CONTROLS_CONTAINER_PADDING,\n    zIndex: 1000,\n    ...(Platform.OS === 'web' && {\n      pointerEvents: 'none',\n    }),\n  },\n  controlsInnerContainer: {\n    alignItems: 'flex-end',\n  },\n  controlsColumn: {\n    alignItems: 'flex-end',\n    gap: spacing.BUTTON_GAP,\n    ...(Platform.OS === 'web' && {\n      pointerEvents: 'auto',\n    }),\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: spacing.BUTTON_PADDING_H,\n    paddingVertical: spacing.BUTTON_PADDING_V,\n    borderRadius: 8,\n    gap: spacing.SMALL,\n    minHeight: 32,\n    minWidth: 90,\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      pointerEvents: 'auto',\n      userSelect: 'none',\n      boxShadow: '0px 2px 4px rgba(0,0,0,0.1)',\n    }),\n  },\n  buttonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n    ...(Platform.OS === 'web' && {\n      userSelect: 'none',\n    }),\n  },\n});","import React, { useTransition } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { RootStackParamList, ComparisonScreenNavigationProp } from '../types/navigation';\nimport ComparisonView from '../components/ComparisonView';\nimport { AppLayout } from '../components/AppLayout';\nimport { SEOHead } from '../components/SEOHead';\nimport { useFoils } from '../hooks/useFoils';\nimport { LoadingIndicator } from '../components/LoadingIndicator';\nimport { ErrorBoundary } from '../components/ErrorBoundary';\nimport { useApp } from '../context/AppContext';\nimport { getEnvironmentConfig } from '../config/environment';\nimport { trackPageView, trackAction, ANALYTICS_EVENTS } from '../utils/analytics';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { DEFAULT_COLUMNS } from '../constants/layout';\nimport { useQuivers } from '../hooks/useQuivers';\nimport { BaseProduct } from '../types/scraper';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { routes } from '../utils/routes';\nimport { FilterOptions } from '../types/scraper';\n\ntype ComparisonScreenParams = {\n  foils?: BaseProduct[];\n  quiverName?: string;\n  searchQuery?: string;\n};\n\ninterface ComparisonScreenProps {\n  route: RouteProp<RootStackParamList, 'Comparison'>;\n  navigation: ComparisonScreenNavigationProp;\n}\n\nconst ComparisonScreen: React.FC<ComparisonScreenProps> = ({\n  route,\n  navigation\n}) => {\n  const [isPending, startTransition] = useTransition();\n  const { params } = route;\n  const { title, foils: initialFoils } = params || {};\n  const { \n    searchQuery, \n    setSearchQuery, \n    selectedFoils: contextSelectedFoils,\n    columns,\n    setColumns,\n    filters,\n    setFilters\n  } = useApp();\n  const [foils, setFoils] = React.useState<BaseProduct[]>(initialFoils || contextSelectedFoils || []);\n  const { foils: allFoils, loading: foilsLoading } = useFoils();\n  const canonicalUrl = `${getEnvironmentConfig().webUrl}${routes.comparison}`;\n\n  // If no foils are provided and we're not in a quiver view, redirect to browse\n  React.useEffect(() => {\n    if (!foilsLoading && !title && (!foils || foils.length === 0)) {\n      startTransition(() => {\n        navigation.replace('Browse', { mode: 'comparison' });\n      });\n      return;\n    }\n  }, [foils, foilsLoading, title, navigation]);\n\n  // Show loading state while waiting for foils data or during transitions\n  if (foilsLoading || !allFoils || isPending) {\n    return (\n      <AppLayout showFooter={true}>\n        <LoadingIndicator />\n      </AppLayout>\n    );\n  }\n\n  // If we have no foils to compare and we're not loading, don't render anything\n  // as we'll be redirected by the useEffect\n  if (!foils || foils.length === 0) {\n    return null;\n  }\n\n  // Define SEO props\n  const seoProps = {\n    title: title \n      ? `FoilQuiver - ${title} Comparison`\n      : \"FoilQuiver - Compare Hydrofoils\",\n    description: `Compare ${foils.length} hydrofoils side by side. Analyze specifications, prices, and features to find your perfect match.`,\n    canonicalUrl\n  };\n\n  const handleClose = () => {\n    startTransition(() => {\n      navigation.goBack();\n    });\n  };\n\n  const handleUpdateQuiver = (updatedFoils: BaseProduct[]) => {\n    if (!updatedFoils || updatedFoils.length === 0) {\n      startTransition(() => {\n        navigation.replace('Browse', { mode: 'comparison' });\n      });\n      return;\n    }\n    \n    setFoils(updatedFoils);\n    if (title) {\n      trackAction(ANALYTICS_EVENTS.UPDATE_QUIVER, {\n        quiverName: title,\n        foilCount: updatedFoils.length\n      });\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    trackAction(ANALYTICS_EVENTS.SEARCH_FOILS, {\n      screen: 'comparison',\n      query\n    });\n  };\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = (columnId: string) => {\n    setColumns(prev => \n      prev.map(col => \n        col.id === columnId ? { ...col, isVisible: !col.isVisible } : col\n      )\n    );\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (type: keyof FilterOptions, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [type]: prev[type].includes(value)\n        ? prev[type].filter(item => item !== value)\n        : [...prev[type], value]\n    }));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({ brands: [], series: [], type: [] });\n  };\n\n  // Create tableSettingsProps for AppHeader\n  const tableSettingsProps = {\n    filterOptions: {\n      brands: Array.from(new Set(allFoils?.map(f => f.brand) || [])),\n      series: Array.from(new Set(allFoils?.map(f => f.series).filter((s): s is string => !!s) || [])),\n      types: Array.from(new Set(allFoils?.map(f => f.type).filter((t): t is 'front' | 'tail' => t === 'front' || t === 'tail') || []))\n    },\n    selectedBrands: filters.brands,\n    selectedSeries: filters.series,\n    selectedTypes: filters.type,\n    onFilterChange: handleFilterChange,\n    onClearFilters: handleClearFilters,\n    columns,\n    onColumnVisibilityChange: handleColumnVisibilityChange,\n    onResetColumns: () => setColumns(DEFAULT_COLUMNS),\n    foils: allFoils || [],\n  };\n\n  return (\n    <AppLayout showFooter={true}>\n      <SEOHead {...seoProps} />\n      <View style={styles.tableContainer}>\n        <ComparisonView\n          foils={foils}\n          allFoils={allFoils}\n          columns={columns}\n          onClose={handleClose}\n          quiverName={title}\n          onUpdateQuiver={handleUpdateQuiver}\n          searchQuery={searchQuery}\n          onSearch={handleSearch}\n          onColumnVisibilityChange={handleColumnVisibilityChange}\n          onResetColumns={() => setColumns(DEFAULT_COLUMNS)}\n          filterOptions={{\n            brands: Array.from(new Set(allFoils?.map(f => f.brand) || [])),\n            series: Array.from(new Set(allFoils?.map(f => f.series).filter((s): s is string => !!s) || [])),\n            types: Array.from(new Set(allFoils?.map(f => f.type).filter((t): t is 'front' | 'tail' => t === 'front' || t === 'tail') || []))\n          }}\n          selectedFilters={filters}\n          onFilterChange={handleFilterChange}\n          onClearFilters={handleClearFilters}\n        />\n      </View>\n    </AppLayout>\n  );\n};\n\nconst styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n    flexDirection: 'column',\n    width: '100%',\n    position: 'relative',\n  },\n});\n\nexport default ComparisonScreen; "],"names":["Footer","navigation","useNavigation","width","useWindowDimensions","colors","useTheme","isMobile","_jsx","View","style","styles","container","containerMobile","backgroundColor","background","primary","borderTopColor","border","children","content","contentMobile","linksContainer","linksContainerMobile","_jsxs","linkGroup","linkGroupMobile","Pressable","onPress","navigate","Text","link","color","text","secondary","separator","tertiary","StyleSheet","create","padding","spacing","LARGE","borderTopWidth","maxWidth","marginHorizontal","flexDirection","gap","justifyContent","alignItems","SMALL","fontSize","AppLayout","showFooter","flex","display","ComparisonControls","selectedFoils","onCompareSelected","onExitCompare","onClearSelection","isComparisonView","isQuiverView","length","comparisonBar","TouchableOpacity","button","buttonText","buttonGroup","clearButton","clearButtonText","compareButton","buttonDisabled","handleCompare","foils","disabled","compareButtonText","MEDIUM","Object","assign","paddingHorizontal","paddingVertical","borderRadius","minHeight","minWidth","Platform","OS","cursor","pointerEvents","userSelect","boxShadow","opacity","borderWidth","borderColor","fontWeight","textAlign","FoilCollectionView","allFoils","columns","searchQuery","onSearch","onUpdateFoils","renderHeader","renderControls","onColumnVisibilityChange","onResetColumns","filterOptions","selectedFilters","onFilterChange","onClearFilters","showToast","setShowToast","useState","toastMessage","setToastMessage","route","useRoute","name","currentViewFilterOptions","React","brands","Array","from","Set","map","f","brand","series","filter","s","types","type","t","filteredFoils","useFilteredFoils","searchedFoils","useSearchFoils","displayFoils","searchFoil","some","existingFoil","model","newSearchResults","sortOption","setSortOption","sortedFoils","useSortedFoils","removeFoil","useCallback","foil","updatedFoils","setTimeout","handleFoilSelect","isExisting","window","confirm","Alert","alert","isSelected","isTemporary","FoilsTable","field","ascending","direction","onSort","prev","onFoilSelect","filters","Toast","message","overflow","onCompare","MOBILE_BREAKPOINT","useEffect","async","savedSort","loadSortOption","error","loadSavedSort","saveSortOption","saveSortSettings","getColumnWidth","columnId","COLUMN_WIDTHS","isColumnFiltered","getCellContent","specs","area","toFixed","wingspan","aspectRatio","price","linkButton","open","sourceUrl","linkText","inverse","externalLinkIcon","cellText","includes","numberText","tableWidth","getTableWidth","ScrollView","horizontal","showsHorizontalScrollIndicator","horizontalScrollView","contentContainerStyle","flexGrow","margin","tableContent","tableHeader","headerRow","borderBottomColor","column","isVisible","headerCell","id","borderRightColor","borderRightWidth","headerCellFiltered","handleSort","trackAction","ANALYTICS_EVENTS","SORT_FOILS","headerText","label","sortIconContainer","sortIcon","sortIconUpActive","sortIconDownActive","scrollView","showsVerticalScrollIndicator","bounces","index","selected","temporary","rowKey","pressed","row","rowEven","rowSelected","rowTemporary","success","rowHovered","cell","borderBottomWidth","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","flexShrink","transition","letterSpacing","borderStyle","XSMALL","marginLeft","lineHeight","position","top","right","SEOHead","title","description","canonicalUrl","imageUrl","fullTitle","Helmet","rel","href","property","duration","useRef","Animated","Value","current","sequence","timing","toValue","useNativeDriver","delay","start","getBackgroundColor","bottom","left","transform","translateX","zIndex","useMemo","trim","query","toLowerCase","toString","join","products","sort","a","b","valueA","valueB","multiplier","localeCompare","ComparisonView","initialFoils","onClose","quiverName","onUpdateQuiver","params","isQuiverManagerVisible","setIsQuiverManagerVisible","setFoils","setFilters","setSelectedFoils","useApp","UPDATE_QUIVER","foilCount","controlsContainer","controlsInnerContainer","controlsColumn","handleFilterChange","value","item","handleClearFilters","QuiverManager","initialTab","isModalVisible","hideStandaloneButton","onQuiverSaved","handleQuiverSaved","quiverId","foil_ids","generateFoilId","CONTROLS_CONTAINER_BOTTOM","CONTROLS_CONTAINER_PADDING","BUTTON_GAP","BUTTON_PADDING_H","BUTTON_PADDING_V","tableContainer","ComparisonScreen","isPending","startTransition","useTransition","setSearchQuery","contextSelectedFoils","setColumns","loading","foilsLoading","useFoils","getEnvironmentConfig","webUrl","routes","comparison","replace","mode","LoadingIndicator","seoProps","handleColumnVisibilityChange","col","handleClose","goBack","SEARCH_FOILS","screen","DEFAULT_COLUMNS"],"sourceRoot":""}