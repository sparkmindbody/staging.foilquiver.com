{"version":3,"file":"static/js/409.6b693c7e.chunk.js","mappings":"0aAUA,IAQMA,EAAuC,CAC3CC,IATa,EAUbC,MATa,EAUbC,OATa,EAUbC,KATa,GAYFC,EAAeC,EAAAA,YAG1B,SAAAC,EAAuCC,GAAS,IAADC,EAAAF,EAA5CG,MAAAA,OAAK,IAAAD,EAAG,CAAC,EAACA,EAAEE,EAAIJ,EAAJI,KAAMC,EAAKL,EAALK,MAAUC,GAAAC,EAAAA,EAAAA,SAAAP,EAAAQ,GACzBC,GAASC,EAAAA,EAAAA,qBAETC,EACK,MAATN,EACIO,MAAMC,QAAQR,GACZA,EAAMS,QACJ,SAACC,EAAaC,GAAU,OAAKD,EAAMtB,EAAeuB,EAAK,GACvD,GAEFC,OAAOC,KAAKb,GAAOS,QACjB,SAACC,EAAKC,GAAI,OAAKD,EAAMtB,EAAeuB,EAAa,GACjD,GA1BG,GA8BPG,EAAepB,EAAAA,SAAc,WACjC,IAAMqB,EAnCK,EAmCMT,EAAoBF,EAAOf,IAAM,EAC5C2B,EAnCK,EAmCQV,EAAsBF,EAAOd,MAAQ,EAClD2B,EAnCK,EAmCSX,EAAuBF,EAAOb,OAAS,EACrD2B,EAnCK,EAmCOZ,EAAqBF,EAAOZ,KAAO,EAE/C2B,EAAYC,EAAAA,QAAWC,QAAQvB,GAErC,GAAa,WAATC,EAAmB,CACrB,IAAAuB,EAQIH,EAPFI,OAAAA,OAAM,IAAAD,EAAG,EAACA,EAAAE,EAORL,EANFM,eAAAA,OAAc,IAAAD,EAAGD,EAAMC,EAAAE,EAMrBP,EALFQ,iBAAAA,OAAgB,IAAAD,EAAGH,EAAMG,EAAAE,EAKvBT,EAJFU,UAAAA,OAAS,IAAAD,EAAGH,EAAcG,EAAAE,EAIxBX,EAHFY,YAAAA,OAAW,IAAAD,EAAGH,EAAgBG,EAAAE,EAG5Bb,EAFFc,aAAAA,OAAY,IAAAD,EAAGP,EAAcO,EAAAE,EAE3Bf,EADFgB,WAUF,MAAO,CAACrC,EAPY,CAClB+B,UAAWA,EAAYd,EACvBgB,YAAaA,EAAcf,EAC3BiB,aAAcA,EAAehB,EAC7BkB,iBAPU,IAAAD,EAAGP,EAAAO,GAOYhB,GAI7B,CACE,IAAAkB,EAQIjB,EAPFkB,QAAAA,OAAO,IAAAD,EAAG,EAACA,EAAAE,EAOTnB,EANFoB,gBAAAA,OAAe,IAAAD,EAAGD,EAAOC,EAAAE,EAMvBrB,EALFsB,kBAAAA,OAAiB,IAAAD,EAAGH,EAAOG,EAAAE,EAKzBvB,EAJFwB,WAAAA,OAAU,IAAAD,EAAGH,EAAeG,EAAAE,EAI1BzB,EAHF0B,aAAAA,OAAY,IAAAD,EAAGH,EAAiBG,EAAAE,EAG9B3B,EAFF4B,cAAAA,OAAa,IAAAD,EAAGP,EAAeO,EAAAE,EAE7B7B,EADF8B,YAUF,MAAO,CAACnD,EAPa,CACnB6C,WAAYA,EAAa5B,EACzB8B,aAAcA,EAAe7B,EAC7B+B,cAAeA,EAAgB9B,EAC/BgC,kBAPW,IAAAD,EAAGP,EAAAO,GAOa9B,GAKjC,GAAG,CAACpB,EAAOM,EAAQL,EAAMO,IAEzB,OAAOZ,EAAAA,cAACwD,EAAAA,QAAIC,EAAA,CAACrD,MAAOgB,GAAkBb,EAAI,CAAEL,IAAKA,IACnD,G","sources":["node_modules/react-native-safe-area-context/src/SafeAreaView.web.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext';\nimport type {\n  Edge,\n  NativeSafeAreaViewInstance,\n  NativeSafeAreaViewProps,\n} from './SafeArea.types';\n\n// prettier-ignore\nconst TOP    = 0b1000,\n      RIGHT  = 0b0100,\n      BOTTOM = 0b0010,\n      LEFT   = 0b0001,\n      ALL    = 0b1111;\n\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap: Record<Edge, number> = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT,\n};\n\nexport const SafeAreaView = React.forwardRef<\n  NativeSafeAreaViewInstance,\n  NativeSafeAreaViewProps\n>(({ style = {}, mode, edges, ...rest }, ref) => {\n  const insets = useSafeAreaInsets();\n\n  const edgeBitmask =\n    edges != null\n      ? Array.isArray(edges)\n        ? edges.reduce(\n            (acc: number, edge: Edge) => acc | edgeBitmaskMap[edge],\n            0,\n          )\n        : Object.keys(edges).reduce(\n            (acc, edge) => acc | edgeBitmaskMap[edge as Edge],\n            0,\n          )\n      : ALL;\n\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n\n    const flatStyle = StyleSheet.flatten(style) as Record<string, number>;\n\n    if (mode === 'margin') {\n      const {\n        margin = 0,\n        marginVertical = margin,\n        marginHorizontal = margin,\n        marginTop = marginVertical,\n        marginRight = marginHorizontal,\n        marginBottom = marginVertical,\n        marginLeft = marginHorizontal,\n      } = flatStyle;\n\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft,\n      };\n\n      return [style, marginStyle];\n    } else {\n      const {\n        padding = 0,\n        paddingVertical = padding,\n        paddingHorizontal = padding,\n        paddingTop = paddingVertical,\n        paddingRight = paddingHorizontal,\n        paddingBottom = paddingVertical,\n        paddingLeft = paddingHorizontal,\n      } = flatStyle;\n\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft,\n      };\n\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n\n  return <View style={appliedStyle} {...rest} ref={ref} />;\n});\n"],"names":["edgeBitmaskMap","top","right","bottom","left","SafeAreaView","React","_ref","ref","_ref$style","style","mode","edges","rest","_objectWithoutProperties","_excluded","insets","useSafeAreaInsets","edgeBitmask","Array","isArray","reduce","acc","edge","Object","keys","appliedStyle","insetTop","insetRight","insetBottom","insetLeft","flatStyle","StyleSheet","flatten","_flatStyle$margin","margin","_flatStyle$marginVert","marginVertical","_flatStyle$marginHori","marginHorizontal","_flatStyle$marginTop","marginTop","_flatStyle$marginRigh","marginRight","_flatStyle$marginBott","marginBottom","_flatStyle$marginLeft","marginLeft","_flatStyle$padding","padding","_flatStyle$paddingVer","paddingVertical","_flatStyle$paddingHor","paddingHorizontal","_flatStyle$paddingTop","paddingTop","_flatStyle$paddingRig","paddingRight","_flatStyle$paddingBot","paddingBottom","_flatStyle$paddingLef","paddingLeft","View","_extends"],"sourceRoot":""}