{"version":3,"file":"static/js/597.bd884864.chunk.js","mappings":"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","sources":["src/hooks/useSortedFoils.ts","src/utils/sorting.ts","src/services/productService.ts","src/screens/BrowseScreen.tsx","src/hooks/useFoils.ts","src/hooks/useSearchFoils.ts","src/hooks/useFilteredFoils.ts","src/hooks/useComparison.ts"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { sortProducts } from '../utils/sorting';\n\nexport type SortField = 'brand' | 'series' | 'model' | 'price' | 'area' | 'wingspan' | 'aspectRatio' | 'cord' | 'type' | 'link';\nexport type SortDirection = 'asc' | 'desc';\n\nexport interface SortOption {\n  field: SortField;\n  direction: SortDirection;\n}\n\nexport function useSortedFoils(foils: BaseProduct[]) {\n  const [sortOption, setSortOption] = useState<SortOption>({\n    field: 'area',\n    direction: 'asc'\n  });\n\n  const sortedFoils = useMemo(() => {\n    return sortProducts(foils, sortOption.field, sortOption.direction);\n  }, [foils, sortOption]);\n\n  return {\n    sortOption,\n    setSortOption,\n    sortedFoils\n  };\n} ","import { BaseProduct } from '../types/scraper';\nimport { SortField, SortDirection } from '../hooks/useSortedFoils';\n\nexport function sortProducts(\n  products: BaseProduct[],\n  field: SortField,\n  direction: SortDirection\n): BaseProduct[] {\n  return [...products].sort((a, b) => {\n    let valueA: string | number;\n    let valueB: string | number;\n\n    if (field === 'brand' || field === 'series' || field === 'model') {\n      valueA = a[field].toLowerCase();\n      valueB = b[field].toLowerCase();\n    } else if (field === 'price') {\n      valueA = a.price || 0;\n      valueB = b.price || 0;\n    } else {\n      valueA = a.specs[field];\n      valueB = b.specs[field];\n    }\n    \n    const multiplier = direction === 'asc' ? 1 : -1;\n    \n    if (typeof valueA === 'string') {\n      return valueA.localeCompare(valueB as string) * multiplier;\n    }\n    return (valueA - valueB) * multiplier;\n  });\n} ","import { BaseProduct } from '../types/scraper';\nimport { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport class ProductService {\n  private static isWeb = Platform.OS === 'web';\n  private static DATA_PATH = '/data/foils.json';\n  private static CACHE_DIR = '.cache';\n\n  // Get base URL for data loading\n  private static getBaseUrl(): string {\n    if (process.env.NODE_ENV === 'development') {\n      return '';\n    }\n    return process.env.NODE_ENV === 'staging' \n      ? 'https://staging.foilquiver.com'\n      : 'https://foilquiver.com';\n  }\n\n  static async getAllProducts(): Promise<BaseProduct[]> {\n    try {\n      if (this.isWeb) {\n        const baseUrl = this.getBaseUrl();\n\n        // Try loading from data directory first\n        try {\n          const response = await fetch(`${baseUrl}${this.DATA_PATH}`);\n          if (response.ok) {\n            const products = await response.json();\n            console.log(`Loaded ${products.length} products from ${this.DATA_PATH}`);\n            return products;\n          } else {\n            console.warn(`Failed to load from ${this.DATA_PATH} (${response.status}), trying .cache directory...`);\n          }\n        } catch (error) {\n          console.warn(`Failed to load from ${this.DATA_PATH}, trying .cache directory...`, error);\n        }\n\n        // Try loading from .cache as fallback\n        try {\n          // Normalize brand names to match file names\n          const brands = ['armstrong', 'lift-foils', 'axis-foils', 'code-foils', 'kt-foils', 'uni-foil'];\n          const allProducts: BaseProduct[] = [];\n          \n          for (const brand of brands) {\n            try {\n              const response = await fetch(`${baseUrl}/${this.CACHE_DIR}/${brand}.json`);\n              if (response.ok) {\n                const products = await response.json();\n                console.log(`Loaded ${products.length} products for ${brand} from .cache`);\n                allProducts.push(...products);\n              }\n            } catch (error) {\n              console.warn(`No cache file found for ${brand}`);\n            }\n          }\n\n          if (allProducts.length > 0) {\n            return allProducts;\n          }\n        } catch (error) {\n          console.warn('Failed to load from .cache directory', error);\n        }\n      } else {\n        // For mobile, use AsyncStorage\n        const cached = await AsyncStorage.getItem('foils');\n        if (cached) {\n          const products = JSON.parse(cached);\n          console.log(`Loaded ${products.length} products from AsyncStorage`);\n          return products;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading foils data:', error);\n    }\n    \n    console.warn('No foils data found in any location');\n    return [];\n  }\n} ","import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { useFoils } from '../hooks/useFoils';\nimport { useSearchFoils } from '../hooks/useSearchFoils';\nimport { useFilteredFoils } from '../hooks/useFilteredFoils';\nimport { useSortedFoils, SortField } from '../hooks/useSortedFoils';\nimport { useComparison } from '../hooks/useComparison';\nimport { FilterControls } from '../components/FilterControls';\nimport { LoadingIndicator } from '../components/LoadingIndicator';\nimport { ErrorMessage } from '../components/ErrorMessage';\nimport { FilterOptions } from '../types/filters';\nimport { RootStackParamList } from '../types/navigation';\nimport { SEOHead } from '../components/SEOHead';\n\n// Lazy load heavy components\nconst FoilsTable = lazy(() => import('../components/FoilsTable').then(module => ({ default: module.default })));\nconst ComparisonControls = lazy(() => import('../components/ComparisonControls').then(module => ({ default: module.default })));\nconst ComparisonView = lazy(() => import('../components/ComparisonView').then(module => ({ default: module.default })));\nconst Footer = lazy(() => import('../components/Footer').then(module => ({ default: module.default })));\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Browse'>;\n\nexport default function BrowseScreen({ route, navigation }: Props) {\n  const { foils, loading, error, refreshFoils } = useFoils();\n  const searchQuery = route.params?.searchQuery || '';\n  const { searchedFoils } = useSearchFoils(foils, searchQuery);\n  const { \n    filters, \n    setFilters, \n    filteredFoils, \n    filterOptions \n  } = useFilteredFoils(searchedFoils);\n  const { sortOption, setSortOption, sortedFoils } = useSortedFoils(filteredFoils);\n  const { \n    selectedFoils, \n    toggleFoilSelection, \n    isSelected,\n    clearSelection\n  } = useComparison();\n  \n  const [isComparisonView, setIsComparisonView] = useState(false);\n\n  useEffect(() => {\n    if (route.params?.searchQuery !== searchQuery) {\n      navigation.setParams({ searchQuery });\n    }\n  }, [searchQuery, navigation]);\n\n  useEffect(() => {\n    if (searchQuery) {\n      const url = new URL(window.location.href);\n      url.searchParams.set('searchQuery', searchQuery);\n      window.history.replaceState({}, '', url.toString());\n    }\n  }, [searchQuery]);\n\n  const handleFilterChange = (filterType: keyof FilterOptions, values: string[]) => {\n    if (filterType === 'type') {\n      setFilters((prev: FilterOptions) => ({\n        ...prev,\n        type: values.length > 0 ? values[0] as 'front' | 'tail' : null\n      }));\n    } else {\n      setFilters((prev: FilterOptions) => ({\n        ...prev,\n        [filterType]: values\n      }));\n    }\n  };\n\n  const handleSort = (field: SortField) => {\n    setSortOption(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleCompareSelected = () => {\n    if (selectedFoils.length >= 2) {\n      setIsComparisonView(true);\n    }\n  };\n\n  const handleExitCompare = () => {\n    setIsComparisonView(false);\n    clearSelection();\n  };\n\n  if (loading) {\n    return <LoadingIndicator />;\n  }\n\n  if (error) {\n    return <ErrorMessage message={error} onRetry={refreshFoils} />;\n  }\n\n  return (\n    <>\n      <SEOHead\n        title=\"FoilQuiver - Browse and compare hydrofoils\"\n        description={`Compare ${foils.length} hydrofoils across ${filterOptions.brands.length} brands. Filter by type, brand, and specifications to find your perfect foil.`}\n        canonicalUrl=\"https://foilquiver.com/browse\"\n      />\n      <View style={styles.container}>\n        <FilterControls\n          filterOptions={filterOptions}\n          selectedBrands={filters.brands}\n          selectedSeries={filters.series}\n          selectedTypes={filters.type ? [filters.type] : []}\n          onFilterChange={handleFilterChange}\n        />\n        <View style={styles.tableContainer}>\n          {isComparisonView ? (\n            <Suspense fallback={<LoadingIndicator />}>\n              <ComparisonView \n                foils={selectedFoils} \n                onClose={handleExitCompare}\n                onCompare={() => {}}\n              />\n            </Suspense>\n          ) : (\n            <Suspense fallback={<LoadingIndicator />}>\n              <FoilsTable\n                foils={sortedFoils}\n                onSort={handleSort}\n                onFoilSelect={toggleFoilSelection}\n                isSelected={isSelected}\n                sortOption={sortOption}\n              />\n            </Suspense>\n          )}\n        </View>\n        <Suspense fallback={<LoadingIndicator />}>\n          <ComparisonControls\n            selectedFoils={selectedFoils}\n            onCompareSelected={handleCompareSelected}\n            onExitCompare={handleExitCompare}\n            onClearSelection={clearSelection}\n            isComparisonView={isComparisonView}\n          />\n        </Suspense>\n        <Suspense fallback={<LoadingIndicator />}>\n          <Footer />\n        </Suspense>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  tableContainer: {\n    flex: 1,\n    minHeight: 0, // Important for proper flex behavior\n  },\n}); ","import { useState, useEffect } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { ProductService } from '../services/productService';\n\nexport function useFoils() {\n  const [foils, setFoils] = useState<BaseProduct[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadFoils = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const products = await ProductService.getAllProducts();\n      setFoils(products);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load foils');\n      console.error('Error loading foils:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadFoils();\n  }, []);\n\n  const refreshFoils = () => {\n    loadFoils();\n  };\n\n  return {\n    foils,\n    loading,\n    error,\n    refreshFoils\n  };\n} ","import { useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useSearchFoils(foils: BaseProduct[], searchQuery: string) {\n  const searchedFoils = useMemo(() => {\n    if (!searchQuery.trim()) {\n      return foils;\n    }\n\n    const query = searchQuery.toLowerCase().trim();\n    return foils.filter(foil => {\n      const searchableFields = [\n        foil.brand,\n        foil.model,\n        foil.series,\n        foil.specs.area.toString(),\n        foil.specs.wingspan.toString(),\n        foil.specs.aspectRatio.toString(),\n      ];\n\n      return searchableFields.some(field => \n        field.toLowerCase().includes(query)\n      );\n    });\n  }, [foils, searchQuery]);\n\n  return { searchedFoils };\n} ","import { useState, useMemo } from 'react';\nimport { BaseProduct } from '../types/scraper';\nimport { FilterOptions } from '../types/filters';\n\nexport function useFilteredFoils(foils: BaseProduct[]) {\n  const [filters, setFilters] = useState<FilterOptions>({\n    brands: [],\n    series: [],\n    type: null,\n  });\n\n  const filterOptions = useMemo(() => {\n    const brands = Array.from(new Set(foils.map(foil => foil.brand)));\n    const allSeries = Array.from(new Set(foils.map(foil => foil.series)));\n    const types = ['front', 'tail'];\n\n    // Create brandSeries mapping\n    const brandSeries = brands.reduce((acc, brand) => {\n      acc[brand] = Array.from(new Set(\n        foils\n          .filter(foil => foil.brand === brand)\n          .map(foil => foil.series)\n      ));\n      return acc;\n    }, {} as Record<string, string[]>);\n\n    // Filter foils based on selected type\n    const typeFilteredFoils = filters.type \n      ? foils.filter(foil => foil.type === filters.type)\n      : foils;\n\n    // Get series based on type-filtered foils\n    const typeFilteredSeries = Array.from(new Set(typeFilteredFoils.map(foil => foil.series)));\n\n    // Filter series based on selected brands and type\n    const series = filters.brands.length > 0\n      ? Array.from(new Set(\n          typeFilteredFoils\n            .filter(foil => filters.brands.includes(foil.brand))\n            .map(foil => foil.series)\n        ))\n      : typeFilteredSeries;\n\n    return {\n      brands,\n      series,\n      types,\n      brandSeries,\n    };\n  }, [foils, filters.brands, filters.type]);\n\n  const filteredFoils = useMemo(() => {\n    return foils.filter(foil => {\n      const brandMatch = filters.brands.length === 0 || filters.brands.includes(foil.brand);\n      const seriesMatch = filters.series.length === 0 || filters.series.includes(foil.series);\n      const typeMatch = !filters.type || foil.type === filters.type;\n\n      return brandMatch && seriesMatch && typeMatch;\n    });\n  }, [foils, filters]);\n\n  return {\n    filters,\n    setFilters,\n    filteredFoils,\n    filterOptions,\n  };\n} ","import { useState, useCallback } from 'react';\nimport { BaseProduct } from '../types/scraper';\n\nexport function useComparison() {\n  const [selectedFoils, setSelectedFoils] = useState<BaseProduct[]>([]);\n\n  const toggleFoilSelection = useCallback((foil: BaseProduct) => {\n    setSelectedFoils(prev => {\n      const isAlreadySelected = prev.some(f => f.model === foil.model && f.brand === foil.brand);\n      if (isAlreadySelected) {\n        return prev.filter(f => !(f.model === foil.model && f.brand === foil.brand));\n      }\n      return [...prev, foil];\n    });\n  }, []);\n\n  const isSelected = useCallback((foil: BaseProduct) => {\n    return selectedFoils.some(f => f.model === foil.model && f.brand === foil.brand);\n  }, [selectedFoils]);\n\n  const clearSelection = useCallback(() => {\n    setSelectedFoils([]);\n  }, []);\n\n  return {\n    selectedFoils,\n    toggleFoilSelection,\n    isSelected,\n    clearSelection,\n  };\n} "],"names":["useSortedFoils","foils","_useState","useState","field","direction","_useState2","_slicedToArray","sortOption","setSortOption","sortedFoils","useMemo","products","_toConsumableArray","sort","a","b","valueA","valueB","toLowerCase","price","specs","multiplier","localeCompare","ProductService","_createClass","_classCallCheck","key","value","_getAllProducts","_asyncToGenerator","this","isWeb","baseUrl","getBaseUrl","response","fetch","DATA_PATH","ok","json","error","allProducts","brand","CACHE_DIR","push","apply","length","cached","AsyncStorage","getItem","JSON","parse","arguments","Platform","OS","FoilsTable","lazy","then","module","default","ComparisonControls","ComparisonView","Footer","BrowseScreen","_ref","_route$params","route","navigation","_useFoils","setFoils","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setError","loadFoils","getAllProducts","err","Error","message","useEffect","refreshFoils","useFoils","searchQuery","params","_useSearchFoils","searchedFoils","trim","query","filter","foil","model","series","area","toString","wingspan","aspectRatio","some","includes","useSearchFoils","_useFilteredFoils","brands","type","filters","setFilters","filterOptions","Array","from","Set","map","brandSeries","reduce","acc","typeFilteredFoils","typeFilteredSeries","types","filteredFoils","brandMatch","seriesMatch","typeMatch","useFilteredFoils","_useSortedFoils","_useComparison","selectedFoils","setSelectedFoils","toggleFoilSelection","useCallback","prev","f","concat","isSelected","clearSelection","useComparison","isComparisonView","setIsComparisonView","_route$params2","setParams","url","URL","window","location","href","searchParams","set","history","replaceState","handleExitCompare","_jsx","LoadingIndicator","ErrorMessage","onRetry","_jsxs","_Fragment","children","SEOHead","title","description","canonicalUrl","View","style","styles","container","FilterControls","selectedBrands","selectedSeries","selectedTypes","onFilterChange","filterType","values","_objectSpread","_defineProperty","tableContainer","Suspense","fallback","onClose","onCompare","onSort","onFoilSelect","onCompareSelected","onExitCompare","onClearSelection","StyleSheet","create","flex","height","display","flexDirection","minHeight"],"sourceRoot":""}